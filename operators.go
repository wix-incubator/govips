package vips

//golint:ignore

/***
 * NOTE: This file is autogenerated so you shouldn't modify it.
 * See scripts/gen-operators.py
 *
 * Generated at 06:10PM on September 09, 2017
 */

// #cgo pkg-config: vips
// #include "vips/vips.h"
import "C"

// Unsupported: affine: 'VipsArrayDouble'
// Unsupported: arrayjoin: 'VipsArrayImage'
// Unsupported: bandjoin: 'VipsArrayImage'
// Unsupported: bandjoin_const: 'VipsArrayDouble'
// Unsupported: bandrank: 'VipsArrayImage'
// Unsupported: boolean_const: 'VipsArrayDouble'
// Unsupported: draw_circle: 'VipsArrayDouble'
// Unsupported: draw_flood: 'VipsArrayDouble'
// Unsupported: draw_line: 'VipsArrayDouble'
// Unsupported: draw_mask: 'VipsArrayDouble'
// Unsupported: draw_rect: 'VipsArrayDouble'
// Unsupported: getpoint: 'VipsArrayDouble'
// Unsupported: linear: 'VipsArrayDouble'
// Unsupported: math2_const: 'VipsArrayDouble'
// Unsupported: relational_const: 'VipsArrayDouble'
// Unsupported: remainder_const: 'VipsArrayDouble'
// Unsupported: sum: 'VipsArrayImage'

// Abs executes the 'abs' operation
// (see abs at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Abs(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("abs", options)
	return out
}

// Add executes the 'add' operation
// (see add at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Add(right *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
	)
	vipsCall("add", options)
	return out
}

// Analyzeload executes the 'analyzeload' operation
// (see analyzeload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Analyzeload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("analyzeload", options)
	return out
}

// Autorot executes the 'autorot' operation
// (see autorot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Autorot(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("autorot", options)
	return out
}

// Avg executes the 'avg' operation
// (see avg at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Avg(opts ...OptionFunc) float64 {
	var out float64
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		DoubleOutput("out", &out),
	)
	vipsCall("avg", options)
	return out
}

// Bandbool executes the 'bandbool' operation
// (see bandbool at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandbool(boolean OperationBoolean, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("boolean", int(boolean)),
	)
	vipsCall("bandbool", options)
	return out
}

// Bandfold executes the 'bandfold' operation
// (see bandfold at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandfold(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("bandfold", options)
	return out
}

// Bandmean executes the 'bandmean' operation
// (see bandmean at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandmean(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("bandmean", options)
	return out
}

// Bandunfold executes the 'bandunfold' operation
// (see bandunfold at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandunfold(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("bandunfold", options)
	return out
}

// Black executes the 'black' operation
// (see black at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Black(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("black", options)
	return out
}

// Boolean executes the 'boolean' operation
// (see boolean at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Boolean(right *Image, boolean OperationBoolean, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
		IntInput("boolean", int(boolean)),
	)
	vipsCall("boolean", options)
	return out
}

// Buildlut executes the 'buildlut' operation
// (see buildlut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Buildlut(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("buildlut", options)
	return out
}

// Byteswap executes the 'byteswap' operation
// (see byteswap at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Byteswap(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("byteswap", options)
	return out
}

// Cache executes the 'cache' operation
// (see cache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Cache(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("cache", options)
	return out
}

// Cast executes the 'cast' operation
// (see cast at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Cast(format BandFormat, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("format", int(format)),
	)
	vipsCall("cast", options)
	return out
}

// Cmc2Lch executes the 'CMC2LCh' operation
// (see CMC2LCh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Cmc2Lch(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("CMC2LCh", options)
	return out
}

// Colourspace executes the 'colourspace' operation
// (see colourspace at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Colourspace(space Interpretation, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("space", int(space)),
	)
	vipsCall("colourspace", options)
	return out
}

// Compass executes the 'compass' operation
// (see compass at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Compass(mask *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("mask", mask),
	)
	vipsCall("compass", options)
	return out
}

// Complex executes the 'complex' operation
// (see complex at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complex(cmplx OperationComplex, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("cmplx", int(cmplx)),
	)
	vipsCall("complex", options)
	return out
}

// Complex2 executes the 'complex2' operation
// (see complex2 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complex2(right *Image, cmplx OperationComplex2, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
		IntInput("cmplx", int(cmplx)),
	)
	vipsCall("complex2", options)
	return out
}

// Complexform executes the 'complexform' operation
// (see complexform at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complexform(right *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
	)
	vipsCall("complexform", options)
	return out
}

// Complexget executes the 'complexget' operation
// (see complexget at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complexget(get OperationComplexGet, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("get", int(get)),
	)
	vipsCall("complexget", options)
	return out
}

// Conv executes the 'conv' operation
// (see conv at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Conv(mask *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("mask", mask),
	)
	vipsCall("conv", options)
	return out
}

// Conva executes the 'conva' operation
// (see conva at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Conva(mask *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("mask", mask),
	)
	vipsCall("conva", options)
	return out
}

// Convasep executes the 'convasep' operation
// (see convasep at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convasep(mask *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("mask", mask),
	)
	vipsCall("convasep", options)
	return out
}

// Convf executes the 'convf' operation
// (see convf at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convf(mask *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("mask", mask),
	)
	vipsCall("convf", options)
	return out
}

// Convi executes the 'convi' operation
// (see convi at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convi(mask *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("mask", mask),
	)
	vipsCall("convi", options)
	return out
}

// Convsep executes the 'convsep' operation
// (see convsep at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convsep(mask *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("mask", mask),
	)
	vipsCall("convsep", options)
	return out
}

// Copy executes the 'copy' operation
// (see copy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Copy(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("copy", options)
	return out
}

// Countlines executes the 'countlines' operation
// (see countlines at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Countlines(direction Direction, opts ...OptionFunc) float64 {
	var nolines float64
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		DoubleOutput("nolines", &nolines),
		IntInput("direction", int(direction)),
	)
	vipsCall("countlines", options)
	return nolines
}

// Csvload executes the 'csvload' operation
// (see csvload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Csvload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("csvload", options)
	return out
}

// Csvsave executes the 'csvsave' operation
// (see csvsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Csvsave(filename string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		StringInput("filename", filename),
	)
	vipsCall("csvsave", options)
}

// De00 executes the 'dE00' operation
// (see dE00 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) De00(right *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
	)
	vipsCall("dE00", options)
	return out
}

// De76 executes the 'dE76' operation
// (see dE76 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) De76(right *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
	)
	vipsCall("dE76", options)
	return out
}

// Decmc executes the 'dECMC' operation
// (see dECMC at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Decmc(right *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
	)
	vipsCall("dECMC", options)
	return out
}

// Deviate executes the 'deviate' operation
// (see deviate at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Deviate(opts ...OptionFunc) float64 {
	var out float64
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		DoubleOutput("out", &out),
	)
	vipsCall("deviate", options)
	return out
}

// Divide executes the 'divide' operation
// (see divide at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Divide(right *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
	)
	vipsCall("divide", options)
	return out
}

// DrawImage executes the 'draw_image' operation
// (see draw_image at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DrawImage(sub *Image, x int, y int, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("image", image),
		ImageInput("sub", sub),
		IntInput("x", x),
		IntInput("y", y),
	)
	vipsCall("draw_image", options)
}

// DrawSmudge executes the 'draw_smudge' operation
// (see draw_smudge at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DrawSmudge(left int, top int, width int, height int, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("image", image),
		IntInput("left", left),
		IntInput("top", top),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("draw_smudge", options)
}

// Dzsave executes the 'dzsave' operation
// (see dzsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Dzsave(filename string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		StringInput("filename", filename),
	)
	vipsCall("dzsave", options)
}

// DzsaveBuffer executes the 'dzsave_buffer' operation
// (see dzsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DzsaveBuffer(opts ...OptionFunc) *Blob {
	var buffer *Blob
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		BlobOutput("buffer", &buffer),
	)
	vipsCall("dzsave_buffer", options)
	return buffer
}

// Embed executes the 'embed' operation
// (see embed at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Embed(x int, y int, width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("x", x),
		IntInput("y", y),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("embed", options)
	return out
}

// ExtractArea executes the 'extract_area' operation
// (see extract_area at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ExtractArea(left int, top int, width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("input", image),
		ImageOutput("out", &out),
		IntInput("left", left),
		IntInput("top", top),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("extract_area", options)
	return out
}

// ExtractBand executes the 'extract_band' operation
// (see extract_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ExtractBand(band int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("band", band),
	)
	vipsCall("extract_band", options)
	return out
}

// Eye executes the 'eye' operation
// (see eye at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Eye(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("eye", options)
	return out
}

// Falsecolour executes the 'falsecolour' operation
// (see falsecolour at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Falsecolour(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("falsecolour", options)
	return out
}

// Fastcor executes the 'fastcor' operation
// (see fastcor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Fastcor(ref *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageInput("ref", ref),
		ImageOutput("out", &out),
	)
	vipsCall("fastcor", options)
	return out
}

// Flatten executes the 'flatten' operation
// (see flatten at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Flatten(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("flatten", options)
	return out
}

// Flip executes the 'flip' operation
// (see flip at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Flip(direction Direction, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("direction", int(direction)),
	)
	vipsCall("flip", options)
	return out
}

// Float2Rad executes the 'float2rad' operation
// (see float2rad at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Float2Rad(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("float2rad", options)
	return out
}

// Fractsurf executes the 'fractsurf' operation
// (see fractsurf at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Fractsurf(width int, height int, fractalDimension float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		DoubleInput("fractal-dimension", fractalDimension),
	)
	vipsCall("fractsurf", options)
	return out
}

// Freqmult executes the 'freqmult' operation
// (see freqmult at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Freqmult(mask *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageInput("mask", mask),
		ImageOutput("out", &out),
	)
	vipsCall("freqmult", options)
	return out
}

// Fwfft executes the 'fwfft' operation
// (see fwfft at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Fwfft(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("fwfft", options)
	return out
}

// Gamma executes the 'gamma' operation
// (see gamma at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Gamma(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("gamma", options)
	return out
}

// Gaussblur executes the 'gaussblur' operation
// (see gaussblur at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Gaussblur(sigma float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		DoubleInput("sigma", sigma),
	)
	vipsCall("gaussblur", options)
	return out
}

// Gaussmat executes the 'gaussmat' operation
// (see gaussmat at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Gaussmat(sigma float64, minAmpl float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		DoubleInput("sigma", sigma),
		DoubleInput("min-ampl", minAmpl),
	)
	vipsCall("gaussmat", options)
	return out
}

// Gaussnoise executes the 'gaussnoise' operation
// (see gaussnoise at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Gaussnoise(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("gaussnoise", options)
	return out
}

// Gifload executes the 'gifload' operation
// (see gifload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Gifload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("gifload", options)
	return out
}

// GifloadBuffer executes the 'gifload_buffer' operation
// (see gifload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func GifloadBuffer(buffer *Blob, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		BlobInput("buffer", buffer),
		ImageOutput("out", &out),
	)
	vipsCall("gifload_buffer", options)
	return out
}

// Globalbalance executes the 'globalbalance' operation
// (see globalbalance at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Globalbalance(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("globalbalance", options)
	return out
}

// Grey executes the 'grey' operation
// (see grey at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Grey(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("grey", options)
	return out
}

// Grid executes the 'grid' operation
// (see grid at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Grid(tileHeight int, across int, down int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("tile-height", tileHeight),
		IntInput("across", across),
		IntInput("down", down),
	)
	vipsCall("grid", options)
	return out
}

// HistCum executes the 'hist_cum' operation
// (see hist_cum at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistCum(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("hist_cum", options)
	return out
}

// HistEntropy executes the 'hist_entropy' operation
// (see hist_entropy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistEntropy(opts ...OptionFunc) float64 {
	var out float64
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		DoubleOutput("out", &out),
	)
	vipsCall("hist_entropy", options)
	return out
}

// HistEqual executes the 'hist_equal' operation
// (see hist_equal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistEqual(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("hist_equal", options)
	return out
}

// HistFind executes the 'hist_find' operation
// (see hist_find at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFind(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("hist_find", options)
	return out
}

// HistFindIndexed executes the 'hist_find_indexed' operation
// (see hist_find_indexed at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFindIndexed(index *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageInput("index", index),
		ImageOutput("out", &out),
	)
	vipsCall("hist_find_indexed", options)
	return out
}

// HistFindNdim executes the 'hist_find_ndim' operation
// (see hist_find_ndim at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFindNdim(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("hist_find_ndim", options)
	return out
}

// HistIsmonotonic executes the 'hist_ismonotonic' operation
// (see hist_ismonotonic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistIsmonotonic(opts ...OptionFunc) bool {
	var monotonic bool
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		BoolOutput("monotonic", &monotonic),
	)
	vipsCall("hist_ismonotonic", options)
	return monotonic
}

// HistLocal executes the 'hist_local' operation
// (see hist_local at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistLocal(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("hist_local", options)
	return out
}

// HistMatch executes the 'hist_match' operation
// (see hist_match at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistMatch(ref *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageInput("ref", ref),
		ImageOutput("out", &out),
	)
	vipsCall("hist_match", options)
	return out
}

// HistNorm executes the 'hist_norm' operation
// (see hist_norm at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistNorm(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("hist_norm", options)
	return out
}

// HistPlot executes the 'hist_plot' operation
// (see hist_plot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistPlot(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("hist_plot", options)
	return out
}

// HoughCircle executes the 'hough_circle' operation
// (see hough_circle at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HoughCircle(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("hough_circle", options)
	return out
}

// HoughLine executes the 'hough_line' operation
// (see hough_line at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HoughLine(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("hough_line", options)
	return out
}

// Hsv2Srgb executes the 'HSV2sRGB' operation
// (see HSV2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Hsv2Srgb(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("HSV2sRGB", options)
	return out
}

// IccExport executes the 'icc_export' operation
// (see icc_export at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccExport(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("icc_export", options)
	return out
}

// IccImport executes the 'icc_import' operation
// (see icc_import at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccImport(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("icc_import", options)
	return out
}

// IccTransform executes the 'icc_transform' operation
// (see icc_transform at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccTransform(outputProfile string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		StringInput("output-profile", outputProfile),
	)
	vipsCall("icc_transform", options)
	return out
}

// Identity executes the 'identity' operation
// (see identity at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Identity(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
	)
	vipsCall("identity", options)
	return out
}

// Ifthenelse executes the 'ifthenelse' operation
// (see ifthenelse at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Ifthenelse(in1 *Image, in2 *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("cond", image),
		ImageInput("in1", in1),
		ImageInput("in2", in2),
		ImageOutput("out", &out),
	)
	vipsCall("ifthenelse", options)
	return out
}

// Insert executes the 'insert' operation
// (see insert at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Insert(sub *Image, x int, y int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("main", image),
		ImageInput("sub", sub),
		ImageOutput("out", &out),
		IntInput("x", x),
		IntInput("y", y),
	)
	vipsCall("insert", options)
	return out
}

// Invert executes the 'invert' operation
// (see invert at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Invert(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("invert", options)
	return out
}

// Invertlut executes the 'invertlut' operation
// (see invertlut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Invertlut(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("invertlut", options)
	return out
}

// Invfft executes the 'invfft' operation
// (see invfft at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Invfft(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("invfft", options)
	return out
}

// Join executes the 'join' operation
// (see join at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Join(in2 *Image, direction Direction, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in1", image),
		ImageInput("in2", in2),
		ImageOutput("out", &out),
		IntInput("direction", int(direction)),
	)
	vipsCall("join", options)
	return out
}

// Jpegload executes the 'jpegload' operation
// (see jpegload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Jpegload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("jpegload", options)
	return out
}

// JpegloadBuffer executes the 'jpegload_buffer' operation
// (see jpegload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func JpegloadBuffer(buffer *Blob, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		BlobInput("buffer", buffer),
		ImageOutput("out", &out),
	)
	vipsCall("jpegload_buffer", options)
	return out
}

// Jpegsave executes the 'jpegsave' operation
// (see jpegsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Jpegsave(filename string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		StringInput("filename", filename),
	)
	vipsCall("jpegsave", options)
}

// JpegsaveBuffer executes the 'jpegsave_buffer' operation
// (see jpegsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) JpegsaveBuffer(opts ...OptionFunc) *Blob {
	var buffer *Blob
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		BlobOutput("buffer", &buffer),
	)
	vipsCall("jpegsave_buffer", options)
	return buffer
}

// JpegsaveMime executes the 'jpegsave_mime' operation
// (see jpegsave_mime at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) JpegsaveMime(opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
	)
	vipsCall("jpegsave_mime", options)
}

// Lab2Labq executes the 'Lab2LabQ' operation
// (see Lab2LabQ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Labq(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("Lab2LabQ", options)
	return out
}

// Lab2Labs executes the 'Lab2LabS' operation
// (see Lab2LabS at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Labs(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("Lab2LabS", options)
	return out
}

// Lab2Lch executes the 'Lab2LCh' operation
// (see Lab2LCh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Lch(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("Lab2LCh", options)
	return out
}

// Lab2Xyz executes the 'Lab2XYZ' operation
// (see Lab2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Xyz(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("Lab2XYZ", options)
	return out
}

// Labelregions executes the 'labelregions' operation
// (see labelregions at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labelregions(opts ...OptionFunc) *Image {
	var mask *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("mask", &mask),
	)
	vipsCall("labelregions", options)
	return mask
}

// Labq2Lab executes the 'LabQ2Lab' operation
// (see LabQ2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2Lab(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("LabQ2Lab", options)
	return out
}

// Labq2Labs executes the 'LabQ2LabS' operation
// (see LabQ2LabS at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2Labs(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("LabQ2LabS", options)
	return out
}

// Labq2Srgb executes the 'LabQ2sRGB' operation
// (see LabQ2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2Srgb(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("LabQ2sRGB", options)
	return out
}

// Labs2Lab executes the 'LabS2Lab' operation
// (see LabS2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labs2Lab(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("LabS2Lab", options)
	return out
}

// Labs2Labq executes the 'LabS2LabQ' operation
// (see LabS2LabQ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labs2Labq(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("LabS2LabQ", options)
	return out
}

// Lch2Cmc executes the 'LCh2CMC' operation
// (see LCh2CMC at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lch2Cmc(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("LCh2CMC", options)
	return out
}

// Lch2Lab executes the 'LCh2Lab' operation
// (see LCh2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lch2Lab(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("LCh2Lab", options)
	return out
}

// Linecache executes the 'linecache' operation
// (see linecache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Linecache(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("linecache", options)
	return out
}

// Logmat executes the 'logmat' operation
// (see logmat at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Logmat(sigma float64, minAmpl float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		DoubleInput("sigma", sigma),
		DoubleInput("min-ampl", minAmpl),
	)
	vipsCall("logmat", options)
	return out
}

// Mapim executes the 'mapim' operation
// (see mapim at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Mapim(index *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("index", index),
	)
	vipsCall("mapim", options)
	return out
}

// Maplut executes the 'maplut' operation
// (see maplut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Maplut(lut *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("lut", lut),
	)
	vipsCall("maplut", options)
	return out
}

// MaskButterworth executes the 'mask_butterworth' operation
// (see mask_butterworth at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworth(width int, height int, order float64, frequencyCutoff float64, amplitudeCutoff float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		DoubleInput("order", order),
		DoubleInput("frequency-cutoff", frequencyCutoff),
		DoubleInput("amplitude-cutoff", amplitudeCutoff),
	)
	vipsCall("mask_butterworth", options)
	return out
}

// MaskButterworthBand executes the 'mask_butterworth_band' operation
// (see mask_butterworth_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworthBand(width int, height int, order float64, frequencyCutoffx float64, frequencyCutoffy float64, radius float64, amplitudeCutoff float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		DoubleInput("order", order),
		DoubleInput("frequency-cutoff-x", frequencyCutoffx),
		DoubleInput("frequency-cutoff-y", frequencyCutoffy),
		DoubleInput("radius", radius),
		DoubleInput("amplitude-cutoff", amplitudeCutoff),
	)
	vipsCall("mask_butterworth_band", options)
	return out
}

// MaskButterworthRing executes the 'mask_butterworth_ring' operation
// (see mask_butterworth_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworthRing(width int, height int, order float64, frequencyCutoff float64, amplitudeCutoff float64, ringwidth float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		DoubleInput("order", order),
		DoubleInput("frequency-cutoff", frequencyCutoff),
		DoubleInput("amplitude-cutoff", amplitudeCutoff),
		DoubleInput("ringwidth", ringwidth),
	)
	vipsCall("mask_butterworth_ring", options)
	return out
}

// MaskFractal executes the 'mask_fractal' operation
// (see mask_fractal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskFractal(width int, height int, fractalDimension float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		DoubleInput("fractal-dimension", fractalDimension),
	)
	vipsCall("mask_fractal", options)
	return out
}

// MaskGaussian executes the 'mask_gaussian' operation
// (see mask_gaussian at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussian(width int, height int, frequencyCutoff float64, amplitudeCutoff float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		DoubleInput("frequency-cutoff", frequencyCutoff),
		DoubleInput("amplitude-cutoff", amplitudeCutoff),
	)
	vipsCall("mask_gaussian", options)
	return out
}

// MaskGaussianBand executes the 'mask_gaussian_band' operation
// (see mask_gaussian_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussianBand(width int, height int, frequencyCutoffx float64, frequencyCutoffy float64, radius float64, amplitudeCutoff float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		DoubleInput("frequency-cutoff-x", frequencyCutoffx),
		DoubleInput("frequency-cutoff-y", frequencyCutoffy),
		DoubleInput("radius", radius),
		DoubleInput("amplitude-cutoff", amplitudeCutoff),
	)
	vipsCall("mask_gaussian_band", options)
	return out
}

// MaskGaussianRing executes the 'mask_gaussian_ring' operation
// (see mask_gaussian_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussianRing(width int, height int, frequencyCutoff float64, amplitudeCutoff float64, ringwidth float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		DoubleInput("frequency-cutoff", frequencyCutoff),
		DoubleInput("amplitude-cutoff", amplitudeCutoff),
		DoubleInput("ringwidth", ringwidth),
	)
	vipsCall("mask_gaussian_ring", options)
	return out
}

// MaskIdeal executes the 'mask_ideal' operation
// (see mask_ideal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdeal(width int, height int, frequencyCutoff float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		DoubleInput("frequency-cutoff", frequencyCutoff),
	)
	vipsCall("mask_ideal", options)
	return out
}

// MaskIdealBand executes the 'mask_ideal_band' operation
// (see mask_ideal_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdealBand(width int, height int, frequencyCutoffx float64, frequencyCutoffy float64, radius float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		DoubleInput("frequency-cutoff-x", frequencyCutoffx),
		DoubleInput("frequency-cutoff-y", frequencyCutoffy),
		DoubleInput("radius", radius),
	)
	vipsCall("mask_ideal_band", options)
	return out
}

// MaskIdealRing executes the 'mask_ideal_ring' operation
// (see mask_ideal_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdealRing(width int, height int, frequencyCutoff float64, ringwidth float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		DoubleInput("frequency-cutoff", frequencyCutoff),
		DoubleInput("ringwidth", ringwidth),
	)
	vipsCall("mask_ideal_ring", options)
	return out
}

// Match executes the 'match' operation
// (see match at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Match(sec *Image, xr1 int, yr1 int, xs1 int, ys1 int, xr2 int, yr2 int, xs2 int, ys2 int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("ref", image),
		ImageInput("sec", sec),
		ImageOutput("out", &out),
		IntInput("xr1", xr1),
		IntInput("yr1", yr1),
		IntInput("xs1", xs1),
		IntInput("ys1", ys1),
		IntInput("xr2", xr2),
		IntInput("yr2", yr2),
		IntInput("xs2", xs2),
		IntInput("ys2", ys2),
	)
	vipsCall("match", options)
	return out
}

// Math executes the 'math' operation
// (see math at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Math(math OperationMath, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("math", int(math)),
	)
	vipsCall("math", options)
	return out
}

// Math2 executes the 'math2' operation
// (see math2 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Math2(right *Image, math2 OperationMath2, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
		IntInput("math2", int(math2)),
	)
	vipsCall("math2", options)
	return out
}

// Matrixload executes the 'matrixload' operation
// (see matrixload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Matrixload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("matrixload", options)
	return out
}

// Matrixprint executes the 'matrixprint' operation
// (see matrixprint at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Matrixprint(opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
	)
	vipsCall("matrixprint", options)
}

// Matrixsave executes the 'matrixsave' operation
// (see matrixsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Matrixsave(filename string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		StringInput("filename", filename),
	)
	vipsCall("matrixsave", options)
}

// Max executes the 'max' operation
// (see max at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Max(opts ...OptionFunc) float64 {
	var out float64
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		DoubleOutput("out", &out),
	)
	vipsCall("max", options)
	return out
}

// Measure executes the 'measure' operation
// (see measure at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Measure(h int, v int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("h", h),
		IntInput("v", v),
	)
	vipsCall("measure", options)
	return out
}

// Merge executes the 'merge' operation
// (see merge at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Merge(sec *Image, direction Direction, dx int, dy int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("ref", image),
		ImageInput("sec", sec),
		ImageOutput("out", &out),
		IntInput("direction", int(direction)),
		IntInput("dx", dx),
		IntInput("dy", dy),
	)
	vipsCall("merge", options)
	return out
}

// Min executes the 'min' operation
// (see min at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Min(opts ...OptionFunc) float64 {
	var out float64
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		DoubleOutput("out", &out),
	)
	vipsCall("min", options)
	return out
}

// Morph executes the 'morph' operation
// (see morph at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Morph(mask *Image, morph OperationMorphology, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("mask", mask),
		IntInput("morph", int(morph)),
	)
	vipsCall("morph", options)
	return out
}

// Mosaic executes the 'mosaic' operation
// (see mosaic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Mosaic(sec *Image, direction Direction, xref int, yref int, xsec int, ysec int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("ref", image),
		ImageInput("sec", sec),
		ImageOutput("out", &out),
		IntInput("direction", int(direction)),
		IntInput("xref", xref),
		IntInput("yref", yref),
		IntInput("xsec", xsec),
		IntInput("ysec", ysec),
	)
	vipsCall("mosaic", options)
	return out
}

// Mosaic1 executes the 'mosaic1' operation
// (see mosaic1 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Mosaic1(sec *Image, direction Direction, xr1 int, yr1 int, xs1 int, ys1 int, xr2 int, yr2 int, xs2 int, ys2 int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("ref", image),
		ImageInput("sec", sec),
		ImageOutput("out", &out),
		IntInput("direction", int(direction)),
		IntInput("xr1", xr1),
		IntInput("yr1", yr1),
		IntInput("xs1", xs1),
		IntInput("ys1", ys1),
		IntInput("xr2", xr2),
		IntInput("yr2", yr2),
		IntInput("xs2", xs2),
		IntInput("ys2", ys2),
	)
	vipsCall("mosaic1", options)
	return out
}

// Msb executes the 'msb' operation
// (see msb at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Msb(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("msb", options)
	return out
}

// Multiply executes the 'multiply' operation
// (see multiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Multiply(right *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
	)
	vipsCall("multiply", options)
	return out
}

// Pdfload executes the 'pdfload' operation
// (see pdfload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Pdfload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("pdfload", options)
	return out
}

// PdfloadBuffer executes the 'pdfload_buffer' operation
// (see pdfload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PdfloadBuffer(buffer *Blob, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		BlobInput("buffer", buffer),
		ImageOutput("out", &out),
	)
	vipsCall("pdfload_buffer", options)
	return out
}

// Percent executes the 'percent' operation
// (see percent at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Percent(percent float64, opts ...OptionFunc) int {
	var threshold int
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		DoubleInput("percent", percent),
		IntOutput("threshold", &threshold),
	)
	vipsCall("percent", options)
	return threshold
}

// Perlin executes the 'perlin' operation
// (see perlin at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Perlin(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("perlin", options)
	return out
}

// Phasecor executes the 'phasecor' operation
// (see phasecor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Phasecor(in2 *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageInput("in2", in2),
		ImageOutput("out", &out),
	)
	vipsCall("phasecor", options)
	return out
}

// Pngload executes the 'pngload' operation
// (see pngload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Pngload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("pngload", options)
	return out
}

// PngloadBuffer executes the 'pngload_buffer' operation
// (see pngload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PngloadBuffer(buffer *Blob, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		BlobInput("buffer", buffer),
		ImageOutput("out", &out),
	)
	vipsCall("pngload_buffer", options)
	return out
}

// Pngsave executes the 'pngsave' operation
// (see pngsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Pngsave(filename string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		StringInput("filename", filename),
	)
	vipsCall("pngsave", options)
}

// PngsaveBuffer executes the 'pngsave_buffer' operation
// (see pngsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) PngsaveBuffer(opts ...OptionFunc) *Blob {
	var buffer *Blob
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		BlobOutput("buffer", &buffer),
	)
	vipsCall("pngsave_buffer", options)
	return buffer
}

// Ppmload executes the 'ppmload' operation
// (see ppmload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Ppmload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("ppmload", options)
	return out
}

// Ppmsave executes the 'ppmsave' operation
// (see ppmsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Ppmsave(filename string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		StringInput("filename", filename),
	)
	vipsCall("ppmsave", options)
}

// Premultiply executes the 'premultiply' operation
// (see premultiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Premultiply(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("premultiply", options)
	return out
}

// Profile executes the 'profile' operation
// (see profile at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Profile(rows **Image, opts ...OptionFunc) *Image {
	var columns *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("columns", &columns),
		ImageOutput("rows", rows),
	)
	vipsCall("profile", options)
	return columns
}

// Project executes the 'project' operation
// (see project at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Project(rows **Image, opts ...OptionFunc) *Image {
	var columns *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("columns", &columns),
		ImageOutput("rows", rows),
	)
	vipsCall("project", options)
	return columns
}

// Quadratic executes the 'quadratic' operation
// (see quadratic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Quadratic(coeff *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("coeff", coeff),
	)
	vipsCall("quadratic", options)
	return out
}

// Rad2Float executes the 'rad2float' operation
// (see rad2float at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rad2Float(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("rad2float", options)
	return out
}

// Radload executes the 'radload' operation
// (see radload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Radload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("radload", options)
	return out
}

// Radsave executes the 'radsave' operation
// (see radsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Radsave(filename string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		StringInput("filename", filename),
	)
	vipsCall("radsave", options)
}

// RadsaveBuffer executes the 'radsave_buffer' operation
// (see radsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RadsaveBuffer(opts ...OptionFunc) *Blob {
	var buffer *Blob
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		BlobOutput("buffer", &buffer),
	)
	vipsCall("radsave_buffer", options)
	return buffer
}

// Rank executes the 'rank' operation
// (see rank at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rank(width int, height int, index int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		IntInput("index", index),
	)
	vipsCall("rank", options)
	return out
}

// Rawload executes the 'rawload' operation
// (see rawload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Rawload(filename string, width int, height int, bands int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
		IntInput("bands", bands),
	)
	vipsCall("rawload", options)
	return out
}

// Rawsave executes the 'rawsave' operation
// (see rawsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rawsave(filename string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		StringInput("filename", filename),
	)
	vipsCall("rawsave", options)
}

// RawsaveFd executes the 'rawsave_fd' operation
// (see rawsave_fd at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RawsaveFd(fd int, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		IntInput("fd", fd),
	)
	vipsCall("rawsave_fd", options)
}

// Recomb executes the 'recomb' operation
// (see recomb at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Recomb(m *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		ImageInput("m", m),
	)
	vipsCall("recomb", options)
	return out
}

// Reduce executes the 'reduce' operation
// (see reduce at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Reduce(hshrink float64, vshrink float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		DoubleInput("hshrink", hshrink),
		DoubleInput("vshrink", vshrink),
	)
	vipsCall("reduce", options)
	return out
}

// Reduceh executes the 'reduceh' operation
// (see reduceh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Reduceh(hshrink float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		DoubleInput("hshrink", hshrink),
	)
	vipsCall("reduceh", options)
	return out
}

// Reducev executes the 'reducev' operation
// (see reducev at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Reducev(vshrink float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		DoubleInput("vshrink", vshrink),
	)
	vipsCall("reducev", options)
	return out
}

// Relational executes the 'relational' operation
// (see relational at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Relational(right *Image, relational OperationRelational, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
		IntInput("relational", int(relational)),
	)
	vipsCall("relational", options)
	return out
}

// Remainder executes the 'remainder' operation
// (see remainder at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Remainder(right *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
	)
	vipsCall("remainder", options)
	return out
}

// Replicate executes the 'replicate' operation
// (see replicate at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Replicate(across int, down int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("across", across),
		IntInput("down", down),
	)
	vipsCall("replicate", options)
	return out
}

// Resize executes the 'resize' operation
// (see resize at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Resize(scale float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		DoubleInput("scale", scale),
	)
	vipsCall("resize", options)
	return out
}

// Rot executes the 'rot' operation
// (see rot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rot(angle Angle, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("angle", int(angle)),
	)
	vipsCall("rot", options)
	return out
}

// Rot45 executes the 'rot45' operation
// (see rot45 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rot45(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("rot45", options)
	return out
}

// Round executes the 'round' operation
// (see round at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Round(round OperationRound, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("round", int(round)),
	)
	vipsCall("round", options)
	return out
}

// Scale executes the 'scale' operation
// (see scale at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scale(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("scale", options)
	return out
}

// Scrgb2Bw executes the 'scRGB2BW' operation
// (see scRGB2BW at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2Bw(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("scRGB2BW", options)
	return out
}

// Scrgb2Srgb executes the 'scRGB2sRGB' operation
// (see scRGB2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2Srgb(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("scRGB2sRGB", options)
	return out
}

// Scrgb2Xyz executes the 'scRGB2XYZ' operation
// (see scRGB2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2Xyz(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("scRGB2XYZ", options)
	return out
}

// Sequential executes the 'sequential' operation
// (see sequential at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Sequential(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("sequential", options)
	return out
}

// Sharpen executes the 'sharpen' operation
// (see sharpen at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Sharpen(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("sharpen", options)
	return out
}

// Shrink executes the 'shrink' operation
// (see shrink at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Shrink(hshrink float64, vshrink float64, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		DoubleInput("hshrink", hshrink),
		DoubleInput("vshrink", vshrink),
	)
	vipsCall("shrink", options)
	return out
}

// Shrinkh executes the 'shrinkh' operation
// (see shrinkh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Shrinkh(hshrink int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("hshrink", hshrink),
	)
	vipsCall("shrinkh", options)
	return out
}

// Shrinkv executes the 'shrinkv' operation
// (see shrinkv at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Shrinkv(vshrink int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("vshrink", vshrink),
	)
	vipsCall("shrinkv", options)
	return out
}

// Sign executes the 'sign' operation
// (see sign at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Sign(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("sign", options)
	return out
}

// Similarity executes the 'similarity' operation
// (see similarity at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Similarity(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("similarity", options)
	return out
}

// Sines executes the 'sines' operation
// (see sines at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Sines(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("sines", options)
	return out
}

// Smartcrop executes the 'smartcrop' operation
// (see smartcrop at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Smartcrop(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("input", image),
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("smartcrop", options)
	return out
}

// Spcor executes the 'spcor' operation
// (see spcor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Spcor(ref *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageInput("ref", ref),
		ImageOutput("out", &out),
	)
	vipsCall("spcor", options)
	return out
}

// Spectrum executes the 'spectrum' operation
// (see spectrum at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Spectrum(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("spectrum", options)
	return out
}

// Srgb2Hsv executes the 'sRGB2HSV' operation
// (see sRGB2HSV at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Srgb2Hsv(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("sRGB2HSV", options)
	return out
}

// Srgb2Scrgb executes the 'sRGB2scRGB' operation
// (see sRGB2scRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Srgb2Scrgb(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("sRGB2scRGB", options)
	return out
}

// Stats executes the 'stats' operation
// (see stats at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Stats(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("stats", options)
	return out
}

// Stdif executes the 'stdif' operation
// (see stdif at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Stdif(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("stdif", options)
	return out
}

// Subsample executes the 'subsample' operation
// (see subsample at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Subsample(xfac int, yfac int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("input", image),
		ImageOutput("out", &out),
		IntInput("xfac", xfac),
		IntInput("yfac", yfac),
	)
	vipsCall("subsample", options)
	return out
}

// Subtract executes the 'subtract' operation
// (see subtract at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Subtract(right *Image, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("left", image),
		ImageInput("right", right),
		ImageOutput("out", &out),
	)
	vipsCall("subtract", options)
	return out
}

// Svgload executes the 'svgload' operation
// (see svgload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Svgload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("svgload", options)
	return out
}

// SvgloadBuffer executes the 'svgload_buffer' operation
// (see svgload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func SvgloadBuffer(buffer *Blob, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		BlobInput("buffer", buffer),
		ImageOutput("out", &out),
	)
	vipsCall("svgload_buffer", options)
	return out
}

// System executes the 'system' operation
// (see system at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func System(cmdFormat string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		StringInput("cmd-format", cmdFormat),
	)
	vipsCall("system", options)
}

// Text executes the 'text' operation
// (see text at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Text(text string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		StringInput("text", text),
	)
	vipsCall("text", options)
	return out
}

// Thumbnail executes the 'thumbnail' operation
// (see thumbnail at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Thumbnail(filename string, width int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
		IntInput("width", width),
	)
	vipsCall("thumbnail", options)
	return out
}

// ThumbnailBuffer executes the 'thumbnail_buffer' operation
// (see thumbnail_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func ThumbnailBuffer(buffer *Blob, width int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		BlobInput("buffer", buffer),
		ImageOutput("out", &out),
		IntInput("width", width),
	)
	vipsCall("thumbnail_buffer", options)
	return out
}

// Tiffload executes the 'tiffload' operation
// (see tiffload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Tiffload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("tiffload", options)
	return out
}

// TiffloadBuffer executes the 'tiffload_buffer' operation
// (see tiffload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func TiffloadBuffer(buffer *Blob, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		BlobInput("buffer", buffer),
		ImageOutput("out", &out),
	)
	vipsCall("tiffload_buffer", options)
	return out
}

// Tiffsave executes the 'tiffsave' operation
// (see tiffsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Tiffsave(filename string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		StringInput("filename", filename),
	)
	vipsCall("tiffsave", options)
}

// TiffsaveBuffer executes the 'tiffsave_buffer' operation
// (see tiffsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) TiffsaveBuffer(opts ...OptionFunc) *Blob {
	var buffer *Blob
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		BlobOutput("buffer", &buffer),
	)
	vipsCall("tiffsave_buffer", options)
	return buffer
}

// Tilecache executes the 'tilecache' operation
// (see tilecache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Tilecache(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("tilecache", options)
	return out
}

// Tonelut executes the 'tonelut' operation
// (see tonelut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Tonelut(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
	)
	vipsCall("tonelut", options)
	return out
}

// Unpremultiply executes the 'unpremultiply' operation
// (see unpremultiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Unpremultiply(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("unpremultiply", options)
	return out
}

// Vipsload executes the 'vipsload' operation
// (see vipsload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Vipsload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("vipsload", options)
	return out
}

// Vipssave executes the 'vipssave' operation
// (see vipssave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Vipssave(filename string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		StringInput("filename", filename),
	)
	vipsCall("vipssave", options)
}

// Webpload executes the 'webpload' operation
// (see webpload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Webpload(filename string, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		StringInput("filename", filename),
		ImageOutput("out", &out),
	)
	vipsCall("webpload", options)
	return out
}

// WebploadBuffer executes the 'webpload_buffer' operation
// (see webpload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func WebploadBuffer(buffer *Blob, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		BlobInput("buffer", buffer),
		ImageOutput("out", &out),
	)
	vipsCall("webpload_buffer", options)
	return out
}

// Webpsave executes the 'webpsave' operation
// (see webpsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Webpsave(filename string, opts ...OptionFunc) {
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		StringInput("filename", filename),
	)
	vipsCall("webpsave", options)
}

// WebpsaveBuffer executes the 'webpsave_buffer' operation
// (see webpsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) WebpsaveBuffer(opts ...OptionFunc) *Blob {
	var buffer *Blob
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		BlobOutput("buffer", &buffer),
	)
	vipsCall("webpsave_buffer", options)
	return buffer
}

// Worley executes the 'worley' operation
// (see worley at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Worley(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("worley", options)
	return out
}

// Wrap executes the 'wrap' operation
// (see wrap at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Wrap(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("wrap", options)
	return out
}

// Xyz executes the 'xyz' operation
// (see xyz at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Xyz(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("xyz", options)
	return out
}

// Xyz2Lab executes the 'XYZ2Lab' operation
// (see XYZ2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2Lab(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("XYZ2Lab", options)
	return out
}

// Xyz2Scrgb executes the 'XYZ2scRGB' operation
// (see XYZ2scRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2Scrgb(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("XYZ2scRGB", options)
	return out
}

// Xyz2Yxy executes the 'XYZ2Yxy' operation
// (see XYZ2Yxy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2Yxy(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("XYZ2Yxy", options)
	return out
}

// Yxy2Xyz executes the 'Yxy2XYZ' operation
// (see Yxy2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Yxy2Xyz(opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("in", image),
		ImageOutput("out", &out),
	)
	vipsCall("Yxy2XYZ", options)
	return out
}

// Zone executes the 'zone' operation
// (see zone at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Zone(width int, height int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageOutput("out", &out),
		IntInput("width", width),
		IntInput("height", height),
	)
	vipsCall("zone", options)
	return out
}

// Zoom executes the 'zoom' operation
// (see zoom at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Zoom(xfac int, yfac int, opts ...OptionFunc) *Image {
	var out *Image
	options := NewOptions(opts...).With(
		ImageInput("input", image),
		ImageOutput("out", &out),
		IntInput("xfac", xfac),
		IntInput("yfac", yfac),
	)
	vipsCall("zoom", options)
	return out
}
