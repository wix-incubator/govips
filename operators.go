package govips

//golint:ignore

/***
 * NOTE: This file is autogenerated so you shouldn't modify it.
 * See scripts/gen-operators.py
 *
 * Generated at 10:12PM on January 03, 2017
 */

// #cgo pkg-config: vips
// #include "vips/vips.h"
import "C"

// Unsupported: affine: 'VipsArrayDouble'
// Unsupported: arrayjoin: 'VipsArrayImage'
// Unsupported: bandjoin: 'VipsArrayImage'
// Unsupported: bandjoin_const: 'VipsArrayDouble'
// Unsupported: bandrank: 'VipsArrayImage'
// Unsupported: boolean_const: 'VipsArrayDouble'
// Unsupported: draw_circle: 'VipsArrayDouble'
// Unsupported: draw_flood: 'VipsArrayDouble'
// Unsupported: draw_line: 'VipsArrayDouble'
// Unsupported: draw_mask: 'VipsArrayDouble'
// Unsupported: draw_rect: 'VipsArrayDouble'
// Unsupported: getpoint: 'VipsArrayDouble'
// Unsupported: linear: 'VipsArrayDouble'
// Unsupported: math2_const: 'VipsArrayDouble'
// Unsupported: relational_const: 'VipsArrayDouble'
// Unsupported: remainder_const: 'VipsArrayDouble'
// Unsupported: sum: 'VipsArrayImage'

// Abs operation (see abs at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Abs(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("abs", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Add operation (see add at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Add(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("add", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out), "")
	return out
}

// Analyzeload operation (see analyzeload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Analyzeload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("analyzeload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// Autorot operation (see autorot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Autorot(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("autorot", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Avg operation (see avg at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Avg(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
	}
	CallOperation("avg", options.
		SetImage("in", image).
		SetDoubleOut("out", &out), "")
	return out
}

// Bandbool operation (see bandbool at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandbool(boolean OperationBoolean, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("bandbool", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("boolean", int(boolean)), "")
	return out
}

// Bandfold operation (see bandfold at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandfold(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("bandfold", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Bandmean operation (see bandmean at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandmean(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("bandmean", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Bandunfold operation (see bandunfold at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandunfold(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("bandunfold", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Black operation (see black at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Black(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("black", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// Boolean operation (see boolean at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Boolean(right *Image, boolean OperationBoolean, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("boolean", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out).
		SetInt("boolean", int(boolean)), "")
	return out
}

// Buildlut operation (see buildlut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Buildlut(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("buildlut", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Byteswap operation (see byteswap at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Byteswap(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("byteswap", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Cache operation (see cache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Cache(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("cache", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Cast operation (see cast at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Cast(format BandFormat, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("cast", options.
		SetImageOut("out", &out).
		SetImage("in", image).
		SetInt("format", int(format)), "")
	return out
}

// Cmc2Lch operation (see CMC2LCh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Cmc2Lch(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("CMC2LCh", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Colourspace operation (see colourspace at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Colourspace(space Interpretation, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("colourspace", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("space", int(space)), "")
	return out
}

// Compass operation (see compass at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Compass(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("compass", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask), "")
	return out
}

// Complex operation (see complex at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complex(cmplx OperationComplex, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("complex", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("cmplx", int(cmplx)), "")
	return out
}

// Complex2 operation (see complex2 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complex2(right *Image, cmplx OperationComplex2, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("complex2", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out).
		SetInt("cmplx", int(cmplx)), "")
	return out
}

// Complexform operation (see complexform at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complexform(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("complexform", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out), "")
	return out
}

// Complexget operation (see complexget at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complexget(get OperationComplexGet, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("complexget", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("get", int(get)), "")
	return out
}

// Conv operation (see conv at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Conv(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("conv", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask), "")
	return out
}

// Conva operation (see conva at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Conva(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("conva", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask), "")
	return out
}

// Convasep operation (see convasep at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convasep(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("convasep", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask), "")
	return out
}

// Convf operation (see convf at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convf(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("convf", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask), "")
	return out
}

// Convi operation (see convi at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convi(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("convi", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask), "")
	return out
}

// Convsep operation (see convsep at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convsep(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("convsep", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask), "")
	return out
}

// Copy operation (see copy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Copy(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("copy", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Countlines operation (see countlines at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Countlines(direction Direction, options *Options) float64 {
	var nolines float64
	if options == nil {
		options = NewOptions()
	}
	CallOperation("countlines", options.
		SetImage("in", image).
		SetDoubleOut("nolines", &nolines).
		SetInt("direction", int(direction)), "")
	return nolines
}

// Csvload operation (see csvload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Csvload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("csvload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// Csvsave operation (see csvsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Csvsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("csvsave", options.
		SetImage("in", image).
		SetString("filename", filename), "")
}

// De00 operation (see dE00 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) De00(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("dE00", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out), "")
	return out
}

// De76 operation (see dE76 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) De76(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("dE76", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out), "")
	return out
}

// Decmc operation (see dECMC at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Decmc(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("dECMC", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out), "")
	return out
}

// Deviate operation (see deviate at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Deviate(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
	}
	CallOperation("deviate", options.
		SetImage("in", image).
		SetDoubleOut("out", &out), "")
	return out
}

// Divide operation (see divide at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Divide(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("divide", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out), "")
	return out
}

// DrawImage operation (see draw_image at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DrawImage(sub *Image, x int, y int, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("draw_image", options.
		SetImage("image", image).
		SetImage("sub", sub).
		SetInt("x", x).
		SetInt("y", y), "")
}

// DrawSmudge operation (see draw_smudge at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DrawSmudge(left int, top int, width int, height int, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("draw_smudge", options.
		SetImage("image", image).
		SetInt("left", left).
		SetInt("top", top).
		SetInt("width", width).
		SetInt("height", height), "")
}

// Dzsave operation (see dzsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Dzsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("dzsave", options.
		SetImage("in", image).
		SetString("filename", filename), "")
}

// Embed operation (see embed at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Embed(x int, y int, width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("embed", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("x", x).
		SetInt("y", y).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// ExtractArea operation (see extract_area at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ExtractArea(left int, top int, width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("extract_area", options.
		SetImage("input", image).
		SetImageOut("out", &out).
		SetInt("left", left).
		SetInt("top", top).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// ExtractBand operation (see extract_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ExtractBand(band int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("extract_band", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("band", band), "")
	return out
}

// Eye operation (see eye at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Eye(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("eye", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// Falsecolour operation (see falsecolour at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Falsecolour(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("falsecolour", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Fastcor operation (see fastcor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Fastcor(ref *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("fastcor", options.
		SetImage("in", image).
		SetImage("ref", ref).
		SetImageOut("out", &out), "")
	return out
}

// Flatten operation (see flatten at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Flatten(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("flatten", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Flip operation (see flip at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Flip(direction Direction, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("flip", options.
		SetImageOut("out", &out).
		SetImage("in", image).
		SetInt("direction", int(direction)), "")
	return out
}

// Float2Rad operation (see float2rad at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Float2Rad(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("float2rad", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Fractsurf operation (see fractsurf at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Fractsurf(width int, height int, fractal_dimension float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("fractsurf", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("fractal-dimension", fractal_dimension), "")
	return out
}

// Freqmult operation (see freqmult at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Freqmult(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("freqmult", options.
		SetImage("in", image).
		SetImage("mask", mask).
		SetImageOut("out", &out), "")
	return out
}

// Fwfft operation (see fwfft at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Fwfft(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("fwfft", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Gamma operation (see gamma at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Gamma(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("gamma", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Gaussblur operation (see gaussblur at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Gaussblur(sigma float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("gaussblur", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("sigma", sigma), "")
	return out
}

// Gaussmat operation (see gaussmat at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Gaussmat(sigma float64, min_ampl float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("gaussmat", options.
		SetImageOut("out", &out).
		SetDouble("sigma", sigma).
		SetDouble("min-ampl", min_ampl), "")
	return out
}

// Gaussnoise operation (see gaussnoise at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Gaussnoise(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("gaussnoise", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// Gifload operation (see gifload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Gifload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("gifload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// GifloadBuffer operation (see gifload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func GifloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("gifload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out), "")
	return out
}

// Globalbalance operation (see globalbalance at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Globalbalance(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("globalbalance", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Grey operation (see grey at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Grey(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("grey", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// Grid operation (see grid at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Grid(tile_height int, across int, down int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("grid", options.
		SetImageOut("out", &out).
		SetImage("in", image).
		SetInt("tile-height", tile_height).
		SetInt("across", across).
		SetInt("down", down), "")
	return out
}

// HistCum operation (see hist_cum at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistCum(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hist_cum", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// HistEntropy operation (see hist_entropy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistEntropy(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hist_entropy", options.
		SetImage("in", image).
		SetDoubleOut("out", &out), "")
	return out
}

// HistEqual operation (see hist_equal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistEqual(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hist_equal", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// HistFind operation (see hist_find at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFind(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hist_find", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// HistFindIndexed operation (see hist_find_indexed at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFindIndexed(index *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hist_find_indexed", options.
		SetImage("in", image).
		SetImage("index", index).
		SetImageOut("out", &out), "")
	return out
}

// HistFindNdim operation (see hist_find_ndim at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFindNdim(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hist_find_ndim", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// HistIsmonotonic operation (see hist_ismonotonic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistIsmonotonic(options *Options) bool {
	var monotonic bool
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hist_ismonotonic", options.
		SetImage("in", image).
		SetBoolOut("monotonic", &monotonic), "")
	return monotonic
}

// HistLocal operation (see hist_local at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistLocal(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hist_local", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// HistMatch operation (see hist_match at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistMatch(ref *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hist_match", options.
		SetImage("in", image).
		SetImage("ref", ref).
		SetImageOut("out", &out), "")
	return out
}

// HistNorm operation (see hist_norm at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistNorm(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hist_norm", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// HistPlot operation (see hist_plot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistPlot(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hist_plot", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// HoughCircle operation (see hough_circle at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HoughCircle(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hough_circle", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// HoughLine operation (see hough_line at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HoughLine(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("hough_line", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Hsv2Srgb operation (see HSV2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Hsv2Srgb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("HSV2sRGB", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// IccExport operation (see icc_export at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccExport(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("icc_export", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// IccImport operation (see icc_import at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccImport(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("icc_import", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// IccTransform operation (see icc_transform at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccTransform(output_profile string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("icc_transform", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetString("output-profile", output_profile), "")
	return out
}

// Identity operation (see identity at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Identity(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("identity", options.
		SetImageOut("out", &out), "")
	return out
}

// Ifthenelse operation (see ifthenelse at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Ifthenelse(in1 *Image, in2 *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("ifthenelse", options.
		SetImage("cond", image).
		SetImage("in1", in1).
		SetImage("in2", in2).
		SetImageOut("out", &out), "")
	return out
}

// Insert operation (see insert at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Insert(sub *Image, x int, y int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("insert", options.
		SetImage("main", image).
		SetImage("sub", sub).
		SetImageOut("out", &out).
		SetInt("x", x).
		SetInt("y", y), "")
	return out
}

// Invert operation (see invert at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Invert(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("invert", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Invertlut operation (see invertlut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Invertlut(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("invertlut", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Invfft operation (see invfft at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Invfft(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("invfft", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Join operation (see join at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Join(in2 *Image, direction Direction, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("join", options.
		SetImage("in1", image).
		SetImage("in2", in2).
		SetImageOut("out", &out).
		SetInt("direction", int(direction)), "")
	return out
}

// Jpegload operation (see jpegload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Jpegload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("jpegload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// JpegloadBuffer operation (see jpegload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func JpegloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("jpegload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out), "")
	return out
}

// Jpegsave operation (see jpegsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Jpegsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("jpegsave", options.
		SetImage("in", image).
		SetString("filename", filename), "")
}

// JpegsaveBuffer operation (see jpegsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) JpegsaveBuffer(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
	}
	CallOperation("jpegsave_buffer", options.
		SetImage("in", image).
		SetBlobOut("buffer", &buffer), "")
	return buffer
}

// JpegsaveMime operation (see jpegsave_mime at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) JpegsaveMime(options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("jpegsave_mime", options.
		SetImage("in", image), "")
}

// Lab2Labq operation (see Lab2LabQ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Labq(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("Lab2LabQ", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Lab2Labs operation (see Lab2LabS at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Labs(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("Lab2LabS", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Lab2Lch operation (see Lab2LCh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Lch(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("Lab2LCh", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Lab2Xyz operation (see Lab2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Xyz(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("Lab2XYZ", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Labelregions operation (see labelregions at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labelregions(options *Options) *Image {
	var mask *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("labelregions", options.
		SetImage("in", image).
		SetImageOut("mask", &mask), "")
	return mask
}

// Labq2Lab operation (see LabQ2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2Lab(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("LabQ2Lab", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Labq2Labs operation (see LabQ2LabS at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2Labs(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("LabQ2LabS", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Labq2Srgb operation (see LabQ2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2Srgb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("LabQ2sRGB", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Labs2Lab operation (see LabS2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labs2Lab(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("LabS2Lab", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Labs2Labq operation (see LabS2LabQ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labs2Labq(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("LabS2LabQ", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Lch2Cmc operation (see LCh2CMC at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lch2Cmc(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("LCh2CMC", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Lch2Lab operation (see LCh2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lch2Lab(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("LCh2Lab", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Linecache operation (see linecache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Linecache(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("linecache", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Logmat operation (see logmat at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Logmat(sigma float64, min_ampl float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("logmat", options.
		SetImageOut("out", &out).
		SetDouble("sigma", sigma).
		SetDouble("min-ampl", min_ampl), "")
	return out
}

// Magickload operation (see magickload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Magickload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("magickload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// MagickloadBuffer operation (see magickload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MagickloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("magickload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out), "")
	return out
}

// Mapim operation (see mapim at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Mapim(index *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mapim", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("index", index), "")
	return out
}

// Maplut operation (see maplut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Maplut(lut *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("maplut", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("lut", lut), "")
	return out
}

// MaskButterworth operation (see mask_butterworth at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworth(width int, height int, order float64, frequency_cutoff float64, amplitude_cutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mask_butterworth", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("order", order).
		SetDouble("frequency-cutoff", frequency_cutoff).
		SetDouble("amplitude-cutoff", amplitude_cutoff), "")
	return out
}

// MaskButterworthBand operation (see mask_butterworth_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworthBand(width int, height int, order float64, frequency_cutoff_x float64, frequency_cutoff_y float64, radius float64, amplitude_cutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mask_butterworth_band", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("order", order).
		SetDouble("frequency-cutoff-x", frequency_cutoff_x).
		SetDouble("frequency-cutoff-y", frequency_cutoff_y).
		SetDouble("radius", radius).
		SetDouble("amplitude-cutoff", amplitude_cutoff), "")
	return out
}

// MaskButterworthRing operation (see mask_butterworth_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworthRing(width int, height int, order float64, frequency_cutoff float64, amplitude_cutoff float64, ringwidth float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mask_butterworth_ring", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("order", order).
		SetDouble("frequency-cutoff", frequency_cutoff).
		SetDouble("amplitude-cutoff", amplitude_cutoff).
		SetDouble("ringwidth", ringwidth), "")
	return out
}

// MaskFractal operation (see mask_fractal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskFractal(width int, height int, fractal_dimension float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mask_fractal", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("fractal-dimension", fractal_dimension), "")
	return out
}

// MaskGaussian operation (see mask_gaussian at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussian(width int, height int, frequency_cutoff float64, amplitude_cutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mask_gaussian", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff", frequency_cutoff).
		SetDouble("amplitude-cutoff", amplitude_cutoff), "")
	return out
}

// MaskGaussianBand operation (see mask_gaussian_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussianBand(width int, height int, frequency_cutoff_x float64, frequency_cutoff_y float64, radius float64, amplitude_cutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mask_gaussian_band", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff-x", frequency_cutoff_x).
		SetDouble("frequency-cutoff-y", frequency_cutoff_y).
		SetDouble("radius", radius).
		SetDouble("amplitude-cutoff", amplitude_cutoff), "")
	return out
}

// MaskGaussianRing operation (see mask_gaussian_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussianRing(width int, height int, frequency_cutoff float64, amplitude_cutoff float64, ringwidth float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mask_gaussian_ring", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff", frequency_cutoff).
		SetDouble("amplitude-cutoff", amplitude_cutoff).
		SetDouble("ringwidth", ringwidth), "")
	return out
}

// MaskIdeal operation (see mask_ideal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdeal(width int, height int, frequency_cutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mask_ideal", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff", frequency_cutoff), "")
	return out
}

// MaskIdealBand operation (see mask_ideal_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdealBand(width int, height int, frequency_cutoff_x float64, frequency_cutoff_y float64, radius float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mask_ideal_band", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff-x", frequency_cutoff_x).
		SetDouble("frequency-cutoff-y", frequency_cutoff_y).
		SetDouble("radius", radius), "")
	return out
}

// MaskIdealRing operation (see mask_ideal_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdealRing(width int, height int, frequency_cutoff float64, ringwidth float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mask_ideal_ring", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff", frequency_cutoff).
		SetDouble("ringwidth", ringwidth), "")
	return out
}

// Match operation (see match at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Match(sec *Image, xr1 int, yr1 int, xs1 int, ys1 int, xr2 int, yr2 int, xs2 int, ys2 int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("match", options.
		SetImage("ref", image).
		SetImage("sec", sec).
		SetImageOut("out", &out).
		SetInt("xr1", xr1).
		SetInt("yr1", yr1).
		SetInt("xs1", xs1).
		SetInt("ys1", ys1).
		SetInt("xr2", xr2).
		SetInt("yr2", yr2).
		SetInt("xs2", xs2).
		SetInt("ys2", ys2), "")
	return out
}

// Math operation (see math at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Math(math OperationMath, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("math", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("math", int(math)), "")
	return out
}

// Math2 operation (see math2 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Math2(right *Image, math2 OperationMath2, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("math2", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out).
		SetInt("math2", int(math2)), "")
	return out
}

// Matrixload operation (see matrixload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Matrixload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("matrixload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// Matrixprint operation (see matrixprint at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Matrixprint(options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("matrixprint", options.
		SetImage("in", image), "")
}

// Matrixsave operation (see matrixsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Matrixsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("matrixsave", options.
		SetImage("in", image).
		SetString("filename", filename), "")
}

// Max operation (see max at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Max(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
	}
	CallOperation("max", options.
		SetImage("in", image).
		SetDoubleOut("out", &out), "")
	return out
}

// Measure operation (see measure at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Measure(h int, v int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("measure", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("h", h).
		SetInt("v", v), "")
	return out
}

// Merge operation (see merge at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Merge(sec *Image, direction Direction, dx int, dy int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("merge", options.
		SetImage("ref", image).
		SetImage("sec", sec).
		SetImageOut("out", &out).
		SetInt("direction", int(direction)).
		SetInt("dx", dx).
		SetInt("dy", dy), "")
	return out
}

// Min operation (see min at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Min(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
	}
	CallOperation("min", options.
		SetImage("in", image).
		SetDoubleOut("out", &out), "")
	return out
}

// Morph operation (see morph at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Morph(mask *Image, morph OperationMorphology, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("morph", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask).
		SetInt("morph", int(morph)), "")
	return out
}

// Mosaic operation (see mosaic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Mosaic(sec *Image, direction Direction, xref int, yref int, xsec int, ysec int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mosaic", options.
		SetImage("ref", image).
		SetImage("sec", sec).
		SetImageOut("out", &out).
		SetInt("direction", int(direction)).
		SetInt("xref", xref).
		SetInt("yref", yref).
		SetInt("xsec", xsec).
		SetInt("ysec", ysec), "")
	return out
}

// Mosaic1 operation (see mosaic1 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Mosaic1(sec *Image, direction Direction, xr1 int, yr1 int, xs1 int, ys1 int, xr2 int, yr2 int, xs2 int, ys2 int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("mosaic1", options.
		SetImage("ref", image).
		SetImage("sec", sec).
		SetImageOut("out", &out).
		SetInt("direction", int(direction)).
		SetInt("xr1", xr1).
		SetInt("yr1", yr1).
		SetInt("xs1", xs1).
		SetInt("ys1", ys1).
		SetInt("xr2", xr2).
		SetInt("yr2", yr2).
		SetInt("xs2", xs2).
		SetInt("ys2", ys2), "")
	return out
}

// Msb operation (see msb at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Msb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("msb", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Multiply operation (see multiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Multiply(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("multiply", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out), "")
	return out
}

// Pdfload operation (see pdfload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Pdfload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("pdfload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// PdfloadBuffer operation (see pdfload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PdfloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("pdfload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out), "")
	return out
}

// Percent operation (see percent at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Percent(percent float64, options *Options) int {
	var threshold int
	if options == nil {
		options = NewOptions()
	}
	CallOperation("percent", options.
		SetImage("in", image).
		SetDouble("percent", percent).
		SetIntOut("threshold", &threshold), "")
	return threshold
}

// Perlin operation (see perlin at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Perlin(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("perlin", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// Phasecor operation (see phasecor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Phasecor(in2 *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("phasecor", options.
		SetImage("in", image).
		SetImage("in2", in2).
		SetImageOut("out", &out), "")
	return out
}

// Pngload operation (see pngload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Pngload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("pngload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// PngloadBuffer operation (see pngload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PngloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("pngload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out), "")
	return out
}

// Pngsave operation (see pngsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Pngsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("pngsave", options.
		SetImage("in", image).
		SetString("filename", filename), "")
}

// PngsaveBuffer operation (see pngsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) PngsaveBuffer(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
	}
	CallOperation("pngsave_buffer", options.
		SetImage("in", image).
		SetBlobOut("buffer", &buffer), "")
	return buffer
}

// Ppmload operation (see ppmload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Ppmload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("ppmload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// Ppmsave operation (see ppmsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Ppmsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("ppmsave", options.
		SetImage("in", image).
		SetString("filename", filename), "")
}

// Premultiply operation (see premultiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Premultiply(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("premultiply", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Profile operation (see profile at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Profile(rows **Image, options *Options) *Image {
	var columns *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("profile", options.
		SetImage("in", image).
		SetImageOut("columns", &columns).
		SetImageOut("rows", rows), "")
	return columns
}

// Project operation (see project at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Project(rows **Image, options *Options) *Image {
	var columns *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("project", options.
		SetImage("in", image).
		SetImageOut("columns", &columns).
		SetImageOut("rows", rows), "")
	return columns
}

// Quadratic operation (see quadratic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Quadratic(coeff *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("quadratic", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("coeff", coeff), "")
	return out
}

// Rad2Float operation (see rad2float at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rad2Float(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("rad2float", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Radload operation (see radload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Radload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("radload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// Radsave operation (see radsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Radsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("radsave", options.
		SetImage("in", image).
		SetString("filename", filename), "")
}

// RadsaveBuffer operation (see radsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RadsaveBuffer(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
	}
	CallOperation("radsave_buffer", options.
		SetImage("in", image).
		SetBlobOut("buffer", &buffer), "")
	return buffer
}

// Rank operation (see rank at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rank(width int, height int, index int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("rank", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetInt("index", index), "")
	return out
}

// Rawload operation (see rawload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Rawload(filename string, width int, height int, bands int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("rawload", options.
		SetString("filename", filename).
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetInt("bands", bands), "")
	return out
}

// Rawsave operation (see rawsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rawsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("rawsave", options.
		SetImage("in", image).
		SetString("filename", filename), "")
}

// RawsaveFd operation (see rawsave_fd at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RawsaveFd(fd int, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("rawsave_fd", options.
		SetImage("in", image).
		SetInt("fd", fd), "")
}

// Recomb operation (see recomb at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Recomb(m *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("recomb", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("m", m), "")
	return out
}

// Reduce operation (see reduce at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Reduce(hshrink float64, vshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("reduce", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("hshrink", hshrink).
		SetDouble("vshrink", vshrink), "")
	return out
}

// Reduceh operation (see reduceh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Reduceh(hshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("reduceh", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("hshrink", hshrink), "")
	return out
}

// Reducev operation (see reducev at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Reducev(vshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("reducev", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("vshrink", vshrink), "")
	return out
}

// Relational operation (see relational at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Relational(right *Image, relational OperationRelational, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("relational", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out).
		SetInt("relational", int(relational)), "")
	return out
}

// Remainder operation (see remainder at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Remainder(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("remainder", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out), "")
	return out
}

// Replicate operation (see replicate at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Replicate(across int, down int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("replicate", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("across", across).
		SetInt("down", down), "")
	return out
}

// Resize operation (see resize at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Resize(scale float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("resize", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("scale", scale), "")
	return out
}

// Rot operation (see rot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rot(angle Angle, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("rot", options.
		SetImageOut("out", &out).
		SetImage("in", image).
		SetInt("angle", int(angle)), "")
	return out
}

// Rot45 operation (see rot45 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rot45(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("rot45", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Round operation (see round at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Round(round OperationRound, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("round", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("round", int(round)), "")
	return out
}

// Scale operation (see scale at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scale(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("scale", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Scrgb2Bw operation (see scRGB2BW at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2Bw(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("scRGB2BW", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Scrgb2Srgb operation (see scRGB2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2Srgb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("scRGB2sRGB", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Scrgb2Xyz operation (see scRGB2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2Xyz(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("scRGB2XYZ", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Sequential operation (see sequential at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Sequential(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("sequential", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Sharpen operation (see sharpen at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Sharpen(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("sharpen", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Shrink operation (see shrink at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Shrink(hshrink float64, vshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("shrink", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("hshrink", hshrink).
		SetDouble("vshrink", vshrink), "")
	return out
}

// Shrinkh operation (see shrinkh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Shrinkh(hshrink int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("shrinkh", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("hshrink", hshrink), "")
	return out
}

// Shrinkv operation (see shrinkv at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Shrinkv(vshrink int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("shrinkv", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("vshrink", vshrink), "")
	return out
}

// Sign operation (see sign at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Sign(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("sign", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Similarity operation (see similarity at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Similarity(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("similarity", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Sines operation (see sines at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Sines(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("sines", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// Spcor operation (see spcor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Spcor(ref *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("spcor", options.
		SetImage("in", image).
		SetImage("ref", ref).
		SetImageOut("out", &out), "")
	return out
}

// Spectrum operation (see spectrum at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Spectrum(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("spectrum", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Srgb2Hsv operation (see sRGB2HSV at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Srgb2Hsv(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("sRGB2HSV", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Srgb2Scrgb operation (see sRGB2scRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Srgb2Scrgb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("sRGB2scRGB", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Stats operation (see stats at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Stats(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("stats", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Stdif operation (see stdif at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Stdif(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("stdif", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// Subsample operation (see subsample at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Subsample(xfac int, yfac int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("subsample", options.
		SetImage("input", image).
		SetImageOut("out", &out).
		SetInt("xfac", xfac).
		SetInt("yfac", yfac), "")
	return out
}

// Subtract operation (see subtract at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Subtract(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("subtract", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out), "")
	return out
}

// Svgload operation (see svgload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Svgload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("svgload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// SvgloadBuffer operation (see svgload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func SvgloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("svgload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out), "")
	return out
}

// System operation (see system at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func System(cmd_format string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("system", options.
		SetString("cmd-format", cmd_format), "")
}

// Text operation (see text at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Text(text string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("text", options.
		SetImageOut("out", &out).
		SetString("text", text), "")
	return out
}

// Tiffload operation (see tiffload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Tiffload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("tiffload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// TiffloadBuffer operation (see tiffload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func TiffloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("tiffload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out), "")
	return out
}

// Tiffsave operation (see tiffsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Tiffsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("tiffsave", options.
		SetImage("in", image).
		SetString("filename", filename), "")
}

// Tilecache operation (see tilecache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Tilecache(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("tilecache", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Tonelut operation (see tonelut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Tonelut(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("tonelut", options.
		SetImageOut("out", &out), "")
	return out
}

// Unpremultiply operation (see unpremultiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Unpremultiply(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("unpremultiply", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Vipsload operation (see vipsload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Vipsload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("vipsload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// Vipssave operation (see vipssave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Vipssave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("vipssave", options.
		SetImage("in", image).
		SetString("filename", filename), "")
}

// Webpload operation (see webpload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Webpload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("webpload", options.
		SetString("filename", filename).
		SetImageOut("out", &out), "")
	return out
}

// WebploadBuffer operation (see webpload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func WebploadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("webpload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out), "")
	return out
}

// Webpsave operation (see webpsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Webpsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	CallOperation("webpsave", options.
		SetImage("in", image).
		SetString("filename", filename), "")
}

// WebpsaveBuffer operation (see webpsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) WebpsaveBuffer(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
	}
	CallOperation("webpsave_buffer", options.
		SetImage("in", image).
		SetBlobOut("buffer", &buffer), "")
	return buffer
}

// Worley operation (see worley at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Worley(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("worley", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// Wrap operation (see wrap at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Wrap(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("wrap", options.
		SetImageOut("out", &out).
		SetImage("in", image), "")
	return out
}

// Xyz operation (see xyz at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Xyz(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("xyz", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// Xyz2Lab operation (see XYZ2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2Lab(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("XYZ2Lab", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Xyz2Scrgb operation (see XYZ2scRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2Scrgb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("XYZ2scRGB", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Xyz2Yxy operation (see XYZ2Yxy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2Yxy(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("XYZ2Yxy", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Yxy2Xyz operation (see Yxy2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Yxy2Xyz(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("Yxy2XYZ", options.
		SetImage("in", image).
		SetImageOut("out", &out), "")
	return out
}

// Zone operation (see zone at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Zone(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("zone", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height), "")
	return out
}

// Zoom operation (see zoom at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Zoom(xfac int, yfac int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	CallOperation("zoom", options.
		SetImage("input", image).
		SetImageOut("out", &out).
		SetInt("xfac", xfac).
		SetInt("yfac", yfac), "")
	return out
}
