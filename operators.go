package govips

//golint:ignore

/***
 * NOTE: This file is autogenerated so you shouldn't modify it.
 * See scripts/gen-operators.py
 *
 * Generated at 05:12PM on September 09, 2017
 */

// #cgo pkg-config: vips
// #include "vips/vips.h"
import "C"

// Unsupported: affine: 'VipsArrayDouble'
// Unsupported: arrayjoin: 'VipsArrayImage'
// Unsupported: bandjoin: 'VipsArrayImage'
// Unsupported: bandjoin_const: 'VipsArrayDouble'
// Unsupported: bandrank: 'VipsArrayImage'
// Unsupported: boolean_const: 'VipsArrayDouble'
// Unsupported: draw_circle: 'VipsArrayDouble'
// Unsupported: draw_flood: 'VipsArrayDouble'
// Unsupported: draw_line: 'VipsArrayDouble'
// Unsupported: draw_mask: 'VipsArrayDouble'
// Unsupported: draw_rect: 'VipsArrayDouble'
// Unsupported: getpoint: 'VipsArrayDouble'
// Unsupported: linear: 'VipsArrayDouble'
// Unsupported: math2_const: 'VipsArrayDouble'
// Unsupported: relational_const: 'VipsArrayDouble'
// Unsupported: remainder_const: 'VipsArrayDouble'
// Unsupported: sum: 'VipsArrayImage'

// Abs executes the 'abs' operation
// (see abs at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Abs() *Image {
	return image.AbsEx(nil)
}

// AbsEx executes the 'abs' operation
// (see abs at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) AbsEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("abs", options)
	return out
}

// Add executes the 'add' operation
// (see add at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Add(right *Image) *Image {
	return image.AddEx(right, nil)
}

// AddEx executes the 'add' operation
// (see add at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) AddEx(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("add", options)
	return out
}

// Analyzeload executes the 'analyzeload' operation
// (see analyzeload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Analyzeload(filename string) *Image {
	return AnalyzeloadEx(filename, nil)
}

// AnalyzeloadEx executes the 'analyzeload' operation
// (see analyzeload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func AnalyzeloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("analyzeload", options)
	return out
}

// Autorot executes the 'autorot' operation
// (see autorot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Autorot() *Image {
	return image.AutorotEx(nil)
}

// AutorotEx executes the 'autorot' operation
// (see autorot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) AutorotEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("autorot", options)
	return out
}

// Avg executes the 'avg' operation
// (see avg at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Avg() float64 {
	return image.AvgEx(nil)
}

// AvgEx executes the 'avg' operation
// (see avg at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) AvgEx(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(DoubleOutput("out", &out))
	}
	vipsCall("avg", options)
	return out
}

// Bandbool executes the 'bandbool' operation
// (see bandbool at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandbool(boolean OperationBoolean) *Image {
	return image.BandboolEx(boolean, nil)
}

// BandboolEx executes the 'bandbool' operation
// (see bandbool at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) BandboolEx(boolean OperationBoolean, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("boolean", int(boolean)))
	}
	vipsCall("bandbool", options)
	return out
}

// Bandfold executes the 'bandfold' operation
// (see bandfold at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandfold() *Image {
	return image.BandfoldEx(nil)
}

// BandfoldEx executes the 'bandfold' operation
// (see bandfold at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) BandfoldEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("bandfold", options)
	return out
}

// Bandmean executes the 'bandmean' operation
// (see bandmean at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandmean() *Image {
	return image.BandmeanEx(nil)
}

// BandmeanEx executes the 'bandmean' operation
// (see bandmean at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) BandmeanEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("bandmean", options)
	return out
}

// Bandunfold executes the 'bandunfold' operation
// (see bandunfold at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Bandunfold() *Image {
	return image.BandunfoldEx(nil)
}

// BandunfoldEx executes the 'bandunfold' operation
// (see bandunfold at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) BandunfoldEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("bandunfold", options)
	return out
}

// Black executes the 'black' operation
// (see black at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Black(width int, height int) *Image {
	return BlackEx(width, height, nil)
}

// BlackEx executes the 'black' operation
// (see black at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func BlackEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("black", options)
	return out
}

// Boolean executes the 'boolean' operation
// (see boolean at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Boolean(right *Image, boolean OperationBoolean) *Image {
	return image.BooleanEx(right, boolean, nil)
}

// BooleanEx executes the 'boolean' operation
// (see boolean at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) BooleanEx(right *Image, boolean OperationBoolean, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("boolean", int(boolean)))
	}
	vipsCall("boolean", options)
	return out
}

// Buildlut executes the 'buildlut' operation
// (see buildlut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Buildlut() *Image {
	return image.BuildlutEx(nil)
}

// BuildlutEx executes the 'buildlut' operation
// (see buildlut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) BuildlutEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("buildlut", options)
	return out
}

// Byteswap executes the 'byteswap' operation
// (see byteswap at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Byteswap() *Image {
	return image.ByteswapEx(nil)
}

// ByteswapEx executes the 'byteswap' operation
// (see byteswap at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ByteswapEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("byteswap", options)
	return out
}

// Cache executes the 'cache' operation
// (see cache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Cache() *Image {
	return image.CacheEx(nil)
}

// CacheEx executes the 'cache' operation
// (see cache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) CacheEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("cache", options)
	return out
}

// Cast executes the 'cast' operation
// (see cast at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Cast(format BandFormat) *Image {
	return image.CastEx(format, nil)
}

// CastEx executes the 'cast' operation
// (see cast at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) CastEx(format BandFormat, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("format", int(format)))
	}
	vipsCall("cast", options)
	return out
}

// Cmc2Lch executes the 'CMC2LCh' operation
// (see CMC2LCh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Cmc2Lch() *Image {
	return image.Cmc2LchEx(nil)
}

// Cmc2LchEx executes the 'CMC2LCh' operation
// (see CMC2LCh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Cmc2LchEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("CMC2LCh", options)
	return out
}

// Colourspace executes the 'colourspace' operation
// (see colourspace at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Colourspace(space Interpretation) *Image {
	return image.ColourspaceEx(space, nil)
}

// ColourspaceEx executes the 'colourspace' operation
// (see colourspace at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ColourspaceEx(space Interpretation, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("space", int(space)))
	}
	vipsCall("colourspace", options)
	return out
}

// Compass executes the 'compass' operation
// (see compass at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Compass(mask *Image) *Image {
	return image.CompassEx(mask, nil)
}

// CompassEx executes the 'compass' operation
// (see compass at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) CompassEx(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("mask", mask))
	}
	vipsCall("compass", options)
	return out
}

// Complex executes the 'complex' operation
// (see complex at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complex(cmplx OperationComplex) *Image {
	return image.ComplexEx(cmplx, nil)
}

// ComplexEx executes the 'complex' operation
// (see complex at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ComplexEx(cmplx OperationComplex, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("cmplx", int(cmplx)))
	}
	vipsCall("complex", options)
	return out
}

// Complex2 executes the 'complex2' operation
// (see complex2 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complex2(right *Image, cmplx OperationComplex2) *Image {
	return image.Complex2Ex(right, cmplx, nil)
}

// Complex2Ex executes the 'complex2' operation
// (see complex2 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complex2Ex(right *Image, cmplx OperationComplex2, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("cmplx", int(cmplx)))
	}
	vipsCall("complex2", options)
	return out
}

// Complexform executes the 'complexform' operation
// (see complexform at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complexform(right *Image) *Image {
	return image.ComplexformEx(right, nil)
}

// ComplexformEx executes the 'complexform' operation
// (see complexform at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ComplexformEx(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("complexform", options)
	return out
}

// Complexget executes the 'complexget' operation
// (see complexget at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Complexget(get OperationComplexGet) *Image {
	return image.ComplexgetEx(get, nil)
}

// ComplexgetEx executes the 'complexget' operation
// (see complexget at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ComplexgetEx(get OperationComplexGet, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("get", int(get)))
	}
	vipsCall("complexget", options)
	return out
}

// Conv executes the 'conv' operation
// (see conv at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Conv(mask *Image) *Image {
	return image.ConvEx(mask, nil)
}

// ConvEx executes the 'conv' operation
// (see conv at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ConvEx(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("mask", mask))
	}
	vipsCall("conv", options)
	return out
}

// Conva executes the 'conva' operation
// (see conva at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Conva(mask *Image) *Image {
	return image.ConvaEx(mask, nil)
}

// ConvaEx executes the 'conva' operation
// (see conva at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ConvaEx(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("mask", mask))
	}
	vipsCall("conva", options)
	return out
}

// Convasep executes the 'convasep' operation
// (see convasep at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convasep(mask *Image) *Image {
	return image.ConvasepEx(mask, nil)
}

// ConvasepEx executes the 'convasep' operation
// (see convasep at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ConvasepEx(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("mask", mask))
	}
	vipsCall("convasep", options)
	return out
}

// Convf executes the 'convf' operation
// (see convf at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convf(mask *Image) *Image {
	return image.ConvfEx(mask, nil)
}

// ConvfEx executes the 'convf' operation
// (see convf at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ConvfEx(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("mask", mask))
	}
	vipsCall("convf", options)
	return out
}

// Convi executes the 'convi' operation
// (see convi at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convi(mask *Image) *Image {
	return image.ConviEx(mask, nil)
}

// ConviEx executes the 'convi' operation
// (see convi at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ConviEx(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("mask", mask))
	}
	vipsCall("convi", options)
	return out
}

// Convsep executes the 'convsep' operation
// (see convsep at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Convsep(mask *Image) *Image {
	return image.ConvsepEx(mask, nil)
}

// ConvsepEx executes the 'convsep' operation
// (see convsep at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ConvsepEx(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("mask", mask))
	}
	vipsCall("convsep", options)
	return out
}

// Copy executes the 'copy' operation
// (see copy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Copy() *Image {
	return image.CopyEx(nil)
}

// CopyEx executes the 'copy' operation
// (see copy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) CopyEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("copy", options)
	return out
}

// Countlines executes the 'countlines' operation
// (see countlines at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Countlines(direction Direction) float64 {
	return image.CountlinesEx(direction, nil)
}

// CountlinesEx executes the 'countlines' operation
// (see countlines at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) CountlinesEx(direction Direction, options *Options) float64 {
	var nolines float64
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(DoubleOutput("nolines", &nolines))
		options.With(IntInput("direction", int(direction)))
	}
	vipsCall("countlines", options)
	return nolines
}

// Csvload executes the 'csvload' operation
// (see csvload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Csvload(filename string) *Image {
	return CsvloadEx(filename, nil)
}

// CsvloadEx executes the 'csvload' operation
// (see csvload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func CsvloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("csvload", options)
	return out
}

// Csvsave executes the 'csvsave' operation
// (see csvsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Csvsave(filename string) {
	image.CsvsaveEx(filename, nil)
}

// CsvsaveEx executes the 'csvsave' operation
// (see csvsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) CsvsaveEx(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(StringInput("filename", filename))
	}
	vipsCall("csvsave", options)
}

// De00 executes the 'dE00' operation
// (see dE00 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) De00(right *Image) *Image {
	return image.De00Ex(right, nil)
}

// De00Ex executes the 'dE00' operation
// (see dE00 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) De00Ex(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("dE00", options)
	return out
}

// De76 executes the 'dE76' operation
// (see dE76 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) De76(right *Image) *Image {
	return image.De76Ex(right, nil)
}

// De76Ex executes the 'dE76' operation
// (see dE76 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) De76Ex(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("dE76", options)
	return out
}

// Decmc executes the 'dECMC' operation
// (see dECMC at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Decmc(right *Image) *Image {
	return image.DecmcEx(right, nil)
}

// DecmcEx executes the 'dECMC' operation
// (see dECMC at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DecmcEx(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("dECMC", options)
	return out
}

// Deviate executes the 'deviate' operation
// (see deviate at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Deviate() float64 {
	return image.DeviateEx(nil)
}

// DeviateEx executes the 'deviate' operation
// (see deviate at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DeviateEx(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(DoubleOutput("out", &out))
	}
	vipsCall("deviate", options)
	return out
}

// Divide executes the 'divide' operation
// (see divide at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Divide(right *Image) *Image {
	return image.DivideEx(right, nil)
}

// DivideEx executes the 'divide' operation
// (see divide at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DivideEx(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("divide", options)
	return out
}

// DrawImage executes the 'draw_image' operation
// (see draw_image at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DrawImage(sub *Image, x int, y int) {
	image.DrawImageEx(sub, x, y, nil)
}

// DrawImageEx executes the 'draw_image' operation
// (see draw_image at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DrawImageEx(sub *Image, x int, y int, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("image", image))
		options.With(ImageInput("sub", sub))
		options.With(IntInput("x", x))
		options.With(IntInput("y", y))
	}
	vipsCall("draw_image", options)
}

// DrawSmudge executes the 'draw_smudge' operation
// (see draw_smudge at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DrawSmudge(left int, top int, width int, height int) {
	image.DrawSmudgeEx(left, top, width, height, nil)
}

// DrawSmudgeEx executes the 'draw_smudge' operation
// (see draw_smudge at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DrawSmudgeEx(left int, top int, width int, height int, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("image", image))
		options.With(IntInput("left", left))
		options.With(IntInput("top", top))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("draw_smudge", options)
}

// Dzsave executes the 'dzsave' operation
// (see dzsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Dzsave(filename string) {
	image.DzsaveEx(filename, nil)
}

// DzsaveEx executes the 'dzsave' operation
// (see dzsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DzsaveEx(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(StringInput("filename", filename))
	}
	vipsCall("dzsave", options)
}

// DzsaveBuffer executes the 'dzsave_buffer' operation
// (see dzsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DzsaveBuffer() *Blob {
	return image.DzsaveBufferEx(nil)
}

// DzsaveBufferEx executes the 'dzsave_buffer' operation
// (see dzsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) DzsaveBufferEx(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(BlobOutput("buffer", &buffer))
	}
	vipsCall("dzsave_buffer", options)
	return buffer
}

// Embed executes the 'embed' operation
// (see embed at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Embed(x int, y int, width int, height int) *Image {
	return image.EmbedEx(x, y, width, height, nil)
}

// EmbedEx executes the 'embed' operation
// (see embed at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) EmbedEx(x int, y int, width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("x", x))
		options.With(IntInput("y", y))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("embed", options)
	return out
}

// ExtractArea executes the 'extract_area' operation
// (see extract_area at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ExtractArea(left int, top int, width int, height int) *Image {
	return image.ExtractAreaEx(left, top, width, height, nil)
}

// ExtractAreaEx executes the 'extract_area' operation
// (see extract_area at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ExtractAreaEx(left int, top int, width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("input", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("left", left))
		options.With(IntInput("top", top))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("extract_area", options)
	return out
}

// ExtractBand executes the 'extract_band' operation
// (see extract_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ExtractBand(band int) *Image {
	return image.ExtractBandEx(band, nil)
}

// ExtractBandEx executes the 'extract_band' operation
// (see extract_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ExtractBandEx(band int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("band", band))
	}
	vipsCall("extract_band", options)
	return out
}

// Eye executes the 'eye' operation
// (see eye at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Eye(width int, height int) *Image {
	return EyeEx(width, height, nil)
}

// EyeEx executes the 'eye' operation
// (see eye at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func EyeEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("eye", options)
	return out
}

// Falsecolour executes the 'falsecolour' operation
// (see falsecolour at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Falsecolour() *Image {
	return image.FalsecolourEx(nil)
}

// FalsecolourEx executes the 'falsecolour' operation
// (see falsecolour at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) FalsecolourEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("falsecolour", options)
	return out
}

// Fastcor executes the 'fastcor' operation
// (see fastcor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Fastcor(ref *Image) *Image {
	return image.FastcorEx(ref, nil)
}

// FastcorEx executes the 'fastcor' operation
// (see fastcor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) FastcorEx(ref *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageInput("ref", ref))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("fastcor", options)
	return out
}

// Flatten executes the 'flatten' operation
// (see flatten at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Flatten() *Image {
	return image.FlattenEx(nil)
}

// FlattenEx executes the 'flatten' operation
// (see flatten at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) FlattenEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("flatten", options)
	return out
}

// Flip executes the 'flip' operation
// (see flip at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Flip(direction Direction) *Image {
	return image.FlipEx(direction, nil)
}

// FlipEx executes the 'flip' operation
// (see flip at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) FlipEx(direction Direction, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("direction", int(direction)))
	}
	vipsCall("flip", options)
	return out
}

// Float2Rad executes the 'float2rad' operation
// (see float2rad at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Float2Rad() *Image {
	return image.Float2RadEx(nil)
}

// Float2RadEx executes the 'float2rad' operation
// (see float2rad at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Float2RadEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("float2rad", options)
	return out
}

// Fractsurf executes the 'fractsurf' operation
// (see fractsurf at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Fractsurf(width int, height int, fractalDimension float64) *Image {
	return FractsurfEx(width, height, fractalDimension, nil)
}

// FractsurfEx executes the 'fractsurf' operation
// (see fractsurf at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func FractsurfEx(width int, height int, fractalDimension float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(DoubleInput("fractal-dimension", fractalDimension))
	}
	vipsCall("fractsurf", options)
	return out
}

// Freqmult executes the 'freqmult' operation
// (see freqmult at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Freqmult(mask *Image) *Image {
	return image.FreqmultEx(mask, nil)
}

// FreqmultEx executes the 'freqmult' operation
// (see freqmult at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) FreqmultEx(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageInput("mask", mask))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("freqmult", options)
	return out
}

// Fwfft executes the 'fwfft' operation
// (see fwfft at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Fwfft() *Image {
	return image.FwfftEx(nil)
}

// FwfftEx executes the 'fwfft' operation
// (see fwfft at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) FwfftEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("fwfft", options)
	return out
}

// Gamma executes the 'gamma' operation
// (see gamma at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Gamma() *Image {
	return image.GammaEx(nil)
}

// GammaEx executes the 'gamma' operation
// (see gamma at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) GammaEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("gamma", options)
	return out
}

// Gaussblur executes the 'gaussblur' operation
// (see gaussblur at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Gaussblur(sigma float64) *Image {
	return image.GaussblurEx(sigma, nil)
}

// GaussblurEx executes the 'gaussblur' operation
// (see gaussblur at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) GaussblurEx(sigma float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(DoubleInput("sigma", sigma))
	}
	vipsCall("gaussblur", options)
	return out
}

// Gaussmat executes the 'gaussmat' operation
// (see gaussmat at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Gaussmat(sigma float64, minAmpl float64) *Image {
	return GaussmatEx(sigma, minAmpl, nil)
}

// GaussmatEx executes the 'gaussmat' operation
// (see gaussmat at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func GaussmatEx(sigma float64, minAmpl float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(DoubleInput("sigma", sigma))
		options.With(DoubleInput("min-ampl", minAmpl))
	}
	vipsCall("gaussmat", options)
	return out
}

// Gaussnoise executes the 'gaussnoise' operation
// (see gaussnoise at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Gaussnoise(width int, height int) *Image {
	return GaussnoiseEx(width, height, nil)
}

// GaussnoiseEx executes the 'gaussnoise' operation
// (see gaussnoise at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func GaussnoiseEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("gaussnoise", options)
	return out
}

// Gifload executes the 'gifload' operation
// (see gifload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Gifload(filename string) *Image {
	return GifloadEx(filename, nil)
}

// GifloadEx executes the 'gifload' operation
// (see gifload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func GifloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("gifload", options)
	return out
}

// GifloadBuffer executes the 'gifload_buffer' operation
// (see gifload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func GifloadBuffer(buffer *Blob) *Image {
	return GifloadBufferEx(buffer, nil)
}

// GifloadBufferEx executes the 'gifload_buffer' operation
// (see gifload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func GifloadBufferEx(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(BlobInput("buffer", buffer))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("gifload_buffer", options)
	return out
}

// Globalbalance executes the 'globalbalance' operation
// (see globalbalance at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Globalbalance() *Image {
	return image.GlobalbalanceEx(nil)
}

// GlobalbalanceEx executes the 'globalbalance' operation
// (see globalbalance at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) GlobalbalanceEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("globalbalance", options)
	return out
}

// Grey executes the 'grey' operation
// (see grey at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Grey(width int, height int) *Image {
	return GreyEx(width, height, nil)
}

// GreyEx executes the 'grey' operation
// (see grey at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func GreyEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("grey", options)
	return out
}

// Grid executes the 'grid' operation
// (see grid at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Grid(tileHeight int, across int, down int) *Image {
	return image.GridEx(tileHeight, across, down, nil)
}

// GridEx executes the 'grid' operation
// (see grid at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) GridEx(tileHeight int, across int, down int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("tile-height", tileHeight))
		options.With(IntInput("across", across))
		options.With(IntInput("down", down))
	}
	vipsCall("grid", options)
	return out
}

// HistCum executes the 'hist_cum' operation
// (see hist_cum at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistCum() *Image {
	return image.HistCumEx(nil)
}

// HistCumEx executes the 'hist_cum' operation
// (see hist_cum at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistCumEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("hist_cum", options)
	return out
}

// HistEntropy executes the 'hist_entropy' operation
// (see hist_entropy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistEntropy() float64 {
	return image.HistEntropyEx(nil)
}

// HistEntropyEx executes the 'hist_entropy' operation
// (see hist_entropy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistEntropyEx(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(DoubleOutput("out", &out))
	}
	vipsCall("hist_entropy", options)
	return out
}

// HistEqual executes the 'hist_equal' operation
// (see hist_equal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistEqual() *Image {
	return image.HistEqualEx(nil)
}

// HistEqualEx executes the 'hist_equal' operation
// (see hist_equal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistEqualEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("hist_equal", options)
	return out
}

// HistFind executes the 'hist_find' operation
// (see hist_find at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFind() *Image {
	return image.HistFindEx(nil)
}

// HistFindEx executes the 'hist_find' operation
// (see hist_find at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFindEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("hist_find", options)
	return out
}

// HistFindIndexed executes the 'hist_find_indexed' operation
// (see hist_find_indexed at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFindIndexed(index *Image) *Image {
	return image.HistFindIndexedEx(index, nil)
}

// HistFindIndexedEx executes the 'hist_find_indexed' operation
// (see hist_find_indexed at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFindIndexedEx(index *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageInput("index", index))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("hist_find_indexed", options)
	return out
}

// HistFindNdim executes the 'hist_find_ndim' operation
// (see hist_find_ndim at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFindNdim() *Image {
	return image.HistFindNdimEx(nil)
}

// HistFindNdimEx executes the 'hist_find_ndim' operation
// (see hist_find_ndim at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistFindNdimEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("hist_find_ndim", options)
	return out
}

// HistIsmonotonic executes the 'hist_ismonotonic' operation
// (see hist_ismonotonic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistIsmonotonic() bool {
	return image.HistIsmonotonicEx(nil)
}

// HistIsmonotonicEx executes the 'hist_ismonotonic' operation
// (see hist_ismonotonic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistIsmonotonicEx(options *Options) bool {
	var monotonic bool
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(BoolOutput("monotonic", &monotonic))
	}
	vipsCall("hist_ismonotonic", options)
	return monotonic
}

// HistLocal executes the 'hist_local' operation
// (see hist_local at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistLocal(width int, height int) *Image {
	return image.HistLocalEx(width, height, nil)
}

// HistLocalEx executes the 'hist_local' operation
// (see hist_local at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistLocalEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("hist_local", options)
	return out
}

// HistMatch executes the 'hist_match' operation
// (see hist_match at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistMatch(ref *Image) *Image {
	return image.HistMatchEx(ref, nil)
}

// HistMatchEx executes the 'hist_match' operation
// (see hist_match at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistMatchEx(ref *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageInput("ref", ref))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("hist_match", options)
	return out
}

// HistNorm executes the 'hist_norm' operation
// (see hist_norm at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistNorm() *Image {
	return image.HistNormEx(nil)
}

// HistNormEx executes the 'hist_norm' operation
// (see hist_norm at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistNormEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("hist_norm", options)
	return out
}

// HistPlot executes the 'hist_plot' operation
// (see hist_plot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistPlot() *Image {
	return image.HistPlotEx(nil)
}

// HistPlotEx executes the 'hist_plot' operation
// (see hist_plot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HistPlotEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("hist_plot", options)
	return out
}

// HoughCircle executes the 'hough_circle' operation
// (see hough_circle at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HoughCircle() *Image {
	return image.HoughCircleEx(nil)
}

// HoughCircleEx executes the 'hough_circle' operation
// (see hough_circle at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HoughCircleEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("hough_circle", options)
	return out
}

// HoughLine executes the 'hough_line' operation
// (see hough_line at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HoughLine() *Image {
	return image.HoughLineEx(nil)
}

// HoughLineEx executes the 'hough_line' operation
// (see hough_line at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) HoughLineEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("hough_line", options)
	return out
}

// Hsv2Srgb executes the 'HSV2sRGB' operation
// (see HSV2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Hsv2Srgb() *Image {
	return image.Hsv2SrgbEx(nil)
}

// Hsv2SrgbEx executes the 'HSV2sRGB' operation
// (see HSV2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Hsv2SrgbEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("HSV2sRGB", options)
	return out
}

// IccExport executes the 'icc_export' operation
// (see icc_export at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccExport() *Image {
	return image.IccExportEx(nil)
}

// IccExportEx executes the 'icc_export' operation
// (see icc_export at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccExportEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("icc_export", options)
	return out
}

// IccImport executes the 'icc_import' operation
// (see icc_import at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccImport() *Image {
	return image.IccImportEx(nil)
}

// IccImportEx executes the 'icc_import' operation
// (see icc_import at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccImportEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("icc_import", options)
	return out
}

// IccTransform executes the 'icc_transform' operation
// (see icc_transform at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccTransform(outputProfile string) *Image {
	return image.IccTransformEx(outputProfile, nil)
}

// IccTransformEx executes the 'icc_transform' operation
// (see icc_transform at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IccTransformEx(outputProfile string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(StringInput("output-profile", outputProfile))
	}
	vipsCall("icc_transform", options)
	return out
}

// Identity executes the 'identity' operation
// (see identity at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Identity() *Image {
	return IdentityEx(nil)
}

// IdentityEx executes the 'identity' operation
// (see identity at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func IdentityEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
	}
	vipsCall("identity", options)
	return out
}

// Ifthenelse executes the 'ifthenelse' operation
// (see ifthenelse at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Ifthenelse(in1 *Image, in2 *Image) *Image {
	return image.IfthenelseEx(in1, in2, nil)
}

// IfthenelseEx executes the 'ifthenelse' operation
// (see ifthenelse at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) IfthenelseEx(in1 *Image, in2 *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("cond", image))
		options.With(ImageInput("in1", in1))
		options.With(ImageInput("in2", in2))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("ifthenelse", options)
	return out
}

// Insert executes the 'insert' operation
// (see insert at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Insert(sub *Image, x int, y int) *Image {
	return image.InsertEx(sub, x, y, nil)
}

// InsertEx executes the 'insert' operation
// (see insert at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) InsertEx(sub *Image, x int, y int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("main", image))
		options.With(ImageInput("sub", sub))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("x", x))
		options.With(IntInput("y", y))
	}
	vipsCall("insert", options)
	return out
}

// Invert executes the 'invert' operation
// (see invert at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Invert() *Image {
	return image.InvertEx(nil)
}

// InvertEx executes the 'invert' operation
// (see invert at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) InvertEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("invert", options)
	return out
}

// Invertlut executes the 'invertlut' operation
// (see invertlut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Invertlut() *Image {
	return image.InvertlutEx(nil)
}

// InvertlutEx executes the 'invertlut' operation
// (see invertlut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) InvertlutEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("invertlut", options)
	return out
}

// Invfft executes the 'invfft' operation
// (see invfft at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Invfft() *Image {
	return image.InvfftEx(nil)
}

// InvfftEx executes the 'invfft' operation
// (see invfft at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) InvfftEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("invfft", options)
	return out
}

// Join executes the 'join' operation
// (see join at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Join(in2 *Image, direction Direction) *Image {
	return image.JoinEx(in2, direction, nil)
}

// JoinEx executes the 'join' operation
// (see join at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) JoinEx(in2 *Image, direction Direction, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in1", image))
		options.With(ImageInput("in2", in2))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("direction", int(direction)))
	}
	vipsCall("join", options)
	return out
}

// Jpegload executes the 'jpegload' operation
// (see jpegload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Jpegload(filename string) *Image {
	return JpegloadEx(filename, nil)
}

// JpegloadEx executes the 'jpegload' operation
// (see jpegload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func JpegloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("jpegload", options)
	return out
}

// JpegloadBuffer executes the 'jpegload_buffer' operation
// (see jpegload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func JpegloadBuffer(buffer *Blob) *Image {
	return JpegloadBufferEx(buffer, nil)
}

// JpegloadBufferEx executes the 'jpegload_buffer' operation
// (see jpegload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func JpegloadBufferEx(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(BlobInput("buffer", buffer))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("jpegload_buffer", options)
	return out
}

// Jpegsave executes the 'jpegsave' operation
// (see jpegsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Jpegsave(filename string) {
	image.JpegsaveEx(filename, nil)
}

// JpegsaveEx executes the 'jpegsave' operation
// (see jpegsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) JpegsaveEx(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(StringInput("filename", filename))
	}
	vipsCall("jpegsave", options)
}

// JpegsaveBuffer executes the 'jpegsave_buffer' operation
// (see jpegsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) JpegsaveBuffer() *Blob {
	return image.JpegsaveBufferEx(nil)
}

// JpegsaveBufferEx executes the 'jpegsave_buffer' operation
// (see jpegsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) JpegsaveBufferEx(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(BlobOutput("buffer", &buffer))
	}
	vipsCall("jpegsave_buffer", options)
	return buffer
}

// JpegsaveMime executes the 'jpegsave_mime' operation
// (see jpegsave_mime at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) JpegsaveMime() {
	image.JpegsaveMimeEx(nil)
}

// JpegsaveMimeEx executes the 'jpegsave_mime' operation
// (see jpegsave_mime at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) JpegsaveMimeEx(options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
	}
	vipsCall("jpegsave_mime", options)
}

// Lab2Labq executes the 'Lab2LabQ' operation
// (see Lab2LabQ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Labq() *Image {
	return image.Lab2LabqEx(nil)
}

// Lab2LabqEx executes the 'Lab2LabQ' operation
// (see Lab2LabQ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2LabqEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("Lab2LabQ", options)
	return out
}

// Lab2Labs executes the 'Lab2LabS' operation
// (see Lab2LabS at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Labs() *Image {
	return image.Lab2LabsEx(nil)
}

// Lab2LabsEx executes the 'Lab2LabS' operation
// (see Lab2LabS at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2LabsEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("Lab2LabS", options)
	return out
}

// Lab2Lch executes the 'Lab2LCh' operation
// (see Lab2LCh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Lch() *Image {
	return image.Lab2LchEx(nil)
}

// Lab2LchEx executes the 'Lab2LCh' operation
// (see Lab2LCh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2LchEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("Lab2LCh", options)
	return out
}

// Lab2Xyz executes the 'Lab2XYZ' operation
// (see Lab2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2Xyz() *Image {
	return image.Lab2XyzEx(nil)
}

// Lab2XyzEx executes the 'Lab2XYZ' operation
// (see Lab2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lab2XyzEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("Lab2XYZ", options)
	return out
}

// Labelregions executes the 'labelregions' operation
// (see labelregions at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labelregions() *Image {
	return image.LabelregionsEx(nil)
}

// LabelregionsEx executes the 'labelregions' operation
// (see labelregions at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) LabelregionsEx(options *Options) *Image {
	var mask *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("mask", &mask))
	}
	vipsCall("labelregions", options)
	return mask
}

// Labq2Lab executes the 'LabQ2Lab' operation
// (see LabQ2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2Lab() *Image {
	return image.Labq2LabEx(nil)
}

// Labq2LabEx executes the 'LabQ2Lab' operation
// (see LabQ2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2LabEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("LabQ2Lab", options)
	return out
}

// Labq2Labs executes the 'LabQ2LabS' operation
// (see LabQ2LabS at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2Labs() *Image {
	return image.Labq2LabsEx(nil)
}

// Labq2LabsEx executes the 'LabQ2LabS' operation
// (see LabQ2LabS at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2LabsEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("LabQ2LabS", options)
	return out
}

// Labq2Srgb executes the 'LabQ2sRGB' operation
// (see LabQ2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2Srgb() *Image {
	return image.Labq2SrgbEx(nil)
}

// Labq2SrgbEx executes the 'LabQ2sRGB' operation
// (see LabQ2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labq2SrgbEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("LabQ2sRGB", options)
	return out
}

// Labs2Lab executes the 'LabS2Lab' operation
// (see LabS2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labs2Lab() *Image {
	return image.Labs2LabEx(nil)
}

// Labs2LabEx executes the 'LabS2Lab' operation
// (see LabS2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labs2LabEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("LabS2Lab", options)
	return out
}

// Labs2Labq executes the 'LabS2LabQ' operation
// (see LabS2LabQ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labs2Labq() *Image {
	return image.Labs2LabqEx(nil)
}

// Labs2LabqEx executes the 'LabS2LabQ' operation
// (see LabS2LabQ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Labs2LabqEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("LabS2LabQ", options)
	return out
}

// Lch2Cmc executes the 'LCh2CMC' operation
// (see LCh2CMC at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lch2Cmc() *Image {
	return image.Lch2CmcEx(nil)
}

// Lch2CmcEx executes the 'LCh2CMC' operation
// (see LCh2CMC at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lch2CmcEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("LCh2CMC", options)
	return out
}

// Lch2Lab executes the 'LCh2Lab' operation
// (see LCh2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lch2Lab() *Image {
	return image.Lch2LabEx(nil)
}

// Lch2LabEx executes the 'LCh2Lab' operation
// (see LCh2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Lch2LabEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("LCh2Lab", options)
	return out
}

// Linecache executes the 'linecache' operation
// (see linecache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Linecache() *Image {
	return image.LinecacheEx(nil)
}

// LinecacheEx executes the 'linecache' operation
// (see linecache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) LinecacheEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("linecache", options)
	return out
}

// Logmat executes the 'logmat' operation
// (see logmat at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Logmat(sigma float64, minAmpl float64) *Image {
	return LogmatEx(sigma, minAmpl, nil)
}

// LogmatEx executes the 'logmat' operation
// (see logmat at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func LogmatEx(sigma float64, minAmpl float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(DoubleInput("sigma", sigma))
		options.With(DoubleInput("min-ampl", minAmpl))
	}
	vipsCall("logmat", options)
	return out
}

// Mapim executes the 'mapim' operation
// (see mapim at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Mapim(index *Image) *Image {
	return image.MapimEx(index, nil)
}

// MapimEx executes the 'mapim' operation
// (see mapim at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MapimEx(index *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("index", index))
	}
	vipsCall("mapim", options)
	return out
}

// Maplut executes the 'maplut' operation
// (see maplut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Maplut(lut *Image) *Image {
	return image.MaplutEx(lut, nil)
}

// MaplutEx executes the 'maplut' operation
// (see maplut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MaplutEx(lut *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("lut", lut))
	}
	vipsCall("maplut", options)
	return out
}

// MaskButterworth executes the 'mask_butterworth' operation
// (see mask_butterworth at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworth(width int, height int, order float64, frequencyCutoff float64, amplitudeCutoff float64) *Image {
	return MaskButterworthEx(width, height, order, frequencyCutoff, amplitudeCutoff, nil)
}

// MaskButterworthEx executes the 'mask_butterworth' operation
// (see mask_butterworth at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworthEx(width int, height int, order float64, frequencyCutoff float64, amplitudeCutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(DoubleInput("order", order))
		options.With(DoubleInput("frequency-cutoff", frequencyCutoff))
		options.With(DoubleInput("amplitude-cutoff", amplitudeCutoff))
	}
	vipsCall("mask_butterworth", options)
	return out
}

// MaskButterworthBand executes the 'mask_butterworth_band' operation
// (see mask_butterworth_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworthBand(width int, height int, order float64, frequencyCutoffx float64, frequencyCutoffy float64, radius float64, amplitudeCutoff float64) *Image {
	return MaskButterworthBandEx(width, height, order, frequencyCutoffx, frequencyCutoffy, radius, amplitudeCutoff, nil)
}

// MaskButterworthBandEx executes the 'mask_butterworth_band' operation
// (see mask_butterworth_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworthBandEx(width int, height int, order float64, frequencyCutoffx float64, frequencyCutoffy float64, radius float64, amplitudeCutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(DoubleInput("order", order))
		options.With(DoubleInput("frequency-cutoff-x", frequencyCutoffx))
		options.With(DoubleInput("frequency-cutoff-y", frequencyCutoffy))
		options.With(DoubleInput("radius", radius))
		options.With(DoubleInput("amplitude-cutoff", amplitudeCutoff))
	}
	vipsCall("mask_butterworth_band", options)
	return out
}

// MaskButterworthRing executes the 'mask_butterworth_ring' operation
// (see mask_butterworth_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworthRing(width int, height int, order float64, frequencyCutoff float64, amplitudeCutoff float64, ringwidth float64) *Image {
	return MaskButterworthRingEx(width, height, order, frequencyCutoff, amplitudeCutoff, ringwidth, nil)
}

// MaskButterworthRingEx executes the 'mask_butterworth_ring' operation
// (see mask_butterworth_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskButterworthRingEx(width int, height int, order float64, frequencyCutoff float64, amplitudeCutoff float64, ringwidth float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(DoubleInput("order", order))
		options.With(DoubleInput("frequency-cutoff", frequencyCutoff))
		options.With(DoubleInput("amplitude-cutoff", amplitudeCutoff))
		options.With(DoubleInput("ringwidth", ringwidth))
	}
	vipsCall("mask_butterworth_ring", options)
	return out
}

// MaskFractal executes the 'mask_fractal' operation
// (see mask_fractal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskFractal(width int, height int, fractalDimension float64) *Image {
	return MaskFractalEx(width, height, fractalDimension, nil)
}

// MaskFractalEx executes the 'mask_fractal' operation
// (see mask_fractal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskFractalEx(width int, height int, fractalDimension float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(DoubleInput("fractal-dimension", fractalDimension))
	}
	vipsCall("mask_fractal", options)
	return out
}

// MaskGaussian executes the 'mask_gaussian' operation
// (see mask_gaussian at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussian(width int, height int, frequencyCutoff float64, amplitudeCutoff float64) *Image {
	return MaskGaussianEx(width, height, frequencyCutoff, amplitudeCutoff, nil)
}

// MaskGaussianEx executes the 'mask_gaussian' operation
// (see mask_gaussian at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussianEx(width int, height int, frequencyCutoff float64, amplitudeCutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(DoubleInput("frequency-cutoff", frequencyCutoff))
		options.With(DoubleInput("amplitude-cutoff", amplitudeCutoff))
	}
	vipsCall("mask_gaussian", options)
	return out
}

// MaskGaussianBand executes the 'mask_gaussian_band' operation
// (see mask_gaussian_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussianBand(width int, height int, frequencyCutoffx float64, frequencyCutoffy float64, radius float64, amplitudeCutoff float64) *Image {
	return MaskGaussianBandEx(width, height, frequencyCutoffx, frequencyCutoffy, radius, amplitudeCutoff, nil)
}

// MaskGaussianBandEx executes the 'mask_gaussian_band' operation
// (see mask_gaussian_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussianBandEx(width int, height int, frequencyCutoffx float64, frequencyCutoffy float64, radius float64, amplitudeCutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(DoubleInput("frequency-cutoff-x", frequencyCutoffx))
		options.With(DoubleInput("frequency-cutoff-y", frequencyCutoffy))
		options.With(DoubleInput("radius", radius))
		options.With(DoubleInput("amplitude-cutoff", amplitudeCutoff))
	}
	vipsCall("mask_gaussian_band", options)
	return out
}

// MaskGaussianRing executes the 'mask_gaussian_ring' operation
// (see mask_gaussian_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussianRing(width int, height int, frequencyCutoff float64, amplitudeCutoff float64, ringwidth float64) *Image {
	return MaskGaussianRingEx(width, height, frequencyCutoff, amplitudeCutoff, ringwidth, nil)
}

// MaskGaussianRingEx executes the 'mask_gaussian_ring' operation
// (see mask_gaussian_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskGaussianRingEx(width int, height int, frequencyCutoff float64, amplitudeCutoff float64, ringwidth float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(DoubleInput("frequency-cutoff", frequencyCutoff))
		options.With(DoubleInput("amplitude-cutoff", amplitudeCutoff))
		options.With(DoubleInput("ringwidth", ringwidth))
	}
	vipsCall("mask_gaussian_ring", options)
	return out
}

// MaskIdeal executes the 'mask_ideal' operation
// (see mask_ideal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdeal(width int, height int, frequencyCutoff float64) *Image {
	return MaskIdealEx(width, height, frequencyCutoff, nil)
}

// MaskIdealEx executes the 'mask_ideal' operation
// (see mask_ideal at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdealEx(width int, height int, frequencyCutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(DoubleInput("frequency-cutoff", frequencyCutoff))
	}
	vipsCall("mask_ideal", options)
	return out
}

// MaskIdealBand executes the 'mask_ideal_band' operation
// (see mask_ideal_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdealBand(width int, height int, frequencyCutoffx float64, frequencyCutoffy float64, radius float64) *Image {
	return MaskIdealBandEx(width, height, frequencyCutoffx, frequencyCutoffy, radius, nil)
}

// MaskIdealBandEx executes the 'mask_ideal_band' operation
// (see mask_ideal_band at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdealBandEx(width int, height int, frequencyCutoffx float64, frequencyCutoffy float64, radius float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(DoubleInput("frequency-cutoff-x", frequencyCutoffx))
		options.With(DoubleInput("frequency-cutoff-y", frequencyCutoffy))
		options.With(DoubleInput("radius", radius))
	}
	vipsCall("mask_ideal_band", options)
	return out
}

// MaskIdealRing executes the 'mask_ideal_ring' operation
// (see mask_ideal_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdealRing(width int, height int, frequencyCutoff float64, ringwidth float64) *Image {
	return MaskIdealRingEx(width, height, frequencyCutoff, ringwidth, nil)
}

// MaskIdealRingEx executes the 'mask_ideal_ring' operation
// (see mask_ideal_ring at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MaskIdealRingEx(width int, height int, frequencyCutoff float64, ringwidth float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(DoubleInput("frequency-cutoff", frequencyCutoff))
		options.With(DoubleInput("ringwidth", ringwidth))
	}
	vipsCall("mask_ideal_ring", options)
	return out
}

// Match executes the 'match' operation
// (see match at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Match(sec *Image, xr1 int, yr1 int, xs1 int, ys1 int, xr2 int, yr2 int, xs2 int, ys2 int) *Image {
	return image.MatchEx(sec, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, nil)
}

// MatchEx executes the 'match' operation
// (see match at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MatchEx(sec *Image, xr1 int, yr1 int, xs1 int, ys1 int, xr2 int, yr2 int, xs2 int, ys2 int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("ref", image))
		options.With(ImageInput("sec", sec))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("xr1", xr1))
		options.With(IntInput("yr1", yr1))
		options.With(IntInput("xs1", xs1))
		options.With(IntInput("ys1", ys1))
		options.With(IntInput("xr2", xr2))
		options.With(IntInput("yr2", yr2))
		options.With(IntInput("xs2", xs2))
		options.With(IntInput("ys2", ys2))
	}
	vipsCall("match", options)
	return out
}

// Math executes the 'math' operation
// (see math at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Math(math OperationMath) *Image {
	return image.MathEx(math, nil)
}

// MathEx executes the 'math' operation
// (see math at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MathEx(math OperationMath, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("math", int(math)))
	}
	vipsCall("math", options)
	return out
}

// Math2 executes the 'math2' operation
// (see math2 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Math2(right *Image, math2 OperationMath2) *Image {
	return image.Math2Ex(right, math2, nil)
}

// Math2Ex executes the 'math2' operation
// (see math2 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Math2Ex(right *Image, math2 OperationMath2, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("math2", int(math2)))
	}
	vipsCall("math2", options)
	return out
}

// Matrixload executes the 'matrixload' operation
// (see matrixload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Matrixload(filename string) *Image {
	return MatrixloadEx(filename, nil)
}

// MatrixloadEx executes the 'matrixload' operation
// (see matrixload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func MatrixloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("matrixload", options)
	return out
}

// Matrixprint executes the 'matrixprint' operation
// (see matrixprint at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Matrixprint() {
	image.MatrixprintEx(nil)
}

// MatrixprintEx executes the 'matrixprint' operation
// (see matrixprint at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MatrixprintEx(options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
	}
	vipsCall("matrixprint", options)
}

// Matrixsave executes the 'matrixsave' operation
// (see matrixsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Matrixsave(filename string) {
	image.MatrixsaveEx(filename, nil)
}

// MatrixsaveEx executes the 'matrixsave' operation
// (see matrixsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MatrixsaveEx(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(StringInput("filename", filename))
	}
	vipsCall("matrixsave", options)
}

// Max executes the 'max' operation
// (see max at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Max() float64 {
	return image.MaxEx(nil)
}

// MaxEx executes the 'max' operation
// (see max at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MaxEx(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(DoubleOutput("out", &out))
	}
	vipsCall("max", options)
	return out
}

// Measure executes the 'measure' operation
// (see measure at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Measure(h int, v int) *Image {
	return image.MeasureEx(h, v, nil)
}

// MeasureEx executes the 'measure' operation
// (see measure at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MeasureEx(h int, v int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("h", h))
		options.With(IntInput("v", v))
	}
	vipsCall("measure", options)
	return out
}

// Merge executes the 'merge' operation
// (see merge at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Merge(sec *Image, direction Direction, dx int, dy int) *Image {
	return image.MergeEx(sec, direction, dx, dy, nil)
}

// MergeEx executes the 'merge' operation
// (see merge at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MergeEx(sec *Image, direction Direction, dx int, dy int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("ref", image))
		options.With(ImageInput("sec", sec))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("direction", int(direction)))
		options.With(IntInput("dx", dx))
		options.With(IntInput("dy", dy))
	}
	vipsCall("merge", options)
	return out
}

// Min executes the 'min' operation
// (see min at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Min() float64 {
	return image.MinEx(nil)
}

// MinEx executes the 'min' operation
// (see min at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MinEx(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(DoubleOutput("out", &out))
	}
	vipsCall("min", options)
	return out
}

// Morph executes the 'morph' operation
// (see morph at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Morph(mask *Image, morph OperationMorphology) *Image {
	return image.MorphEx(mask, morph, nil)
}

// MorphEx executes the 'morph' operation
// (see morph at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MorphEx(mask *Image, morph OperationMorphology, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("mask", mask))
		options.With(IntInput("morph", int(morph)))
	}
	vipsCall("morph", options)
	return out
}

// Mosaic executes the 'mosaic' operation
// (see mosaic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Mosaic(sec *Image, direction Direction, xref int, yref int, xsec int, ysec int) *Image {
	return image.MosaicEx(sec, direction, xref, yref, xsec, ysec, nil)
}

// MosaicEx executes the 'mosaic' operation
// (see mosaic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MosaicEx(sec *Image, direction Direction, xref int, yref int, xsec int, ysec int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("ref", image))
		options.With(ImageInput("sec", sec))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("direction", int(direction)))
		options.With(IntInput("xref", xref))
		options.With(IntInput("yref", yref))
		options.With(IntInput("xsec", xsec))
		options.With(IntInput("ysec", ysec))
	}
	vipsCall("mosaic", options)
	return out
}

// Mosaic1 executes the 'mosaic1' operation
// (see mosaic1 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Mosaic1(sec *Image, direction Direction, xr1 int, yr1 int, xs1 int, ys1 int, xr2 int, yr2 int, xs2 int, ys2 int) *Image {
	return image.Mosaic1Ex(sec, direction, xr1, yr1, xs1, ys1, xr2, yr2, xs2, ys2, nil)
}

// Mosaic1Ex executes the 'mosaic1' operation
// (see mosaic1 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Mosaic1Ex(sec *Image, direction Direction, xr1 int, yr1 int, xs1 int, ys1 int, xr2 int, yr2 int, xs2 int, ys2 int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("ref", image))
		options.With(ImageInput("sec", sec))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("direction", int(direction)))
		options.With(IntInput("xr1", xr1))
		options.With(IntInput("yr1", yr1))
		options.With(IntInput("xs1", xs1))
		options.With(IntInput("ys1", ys1))
		options.With(IntInput("xr2", xr2))
		options.With(IntInput("yr2", yr2))
		options.With(IntInput("xs2", xs2))
		options.With(IntInput("ys2", ys2))
	}
	vipsCall("mosaic1", options)
	return out
}

// Msb executes the 'msb' operation
// (see msb at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Msb() *Image {
	return image.MsbEx(nil)
}

// MsbEx executes the 'msb' operation
// (see msb at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MsbEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("msb", options)
	return out
}

// Multiply executes the 'multiply' operation
// (see multiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Multiply(right *Image) *Image {
	return image.MultiplyEx(right, nil)
}

// MultiplyEx executes the 'multiply' operation
// (see multiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) MultiplyEx(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("multiply", options)
	return out
}

// Pdfload executes the 'pdfload' operation
// (see pdfload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Pdfload(filename string) *Image {
	return PdfloadEx(filename, nil)
}

// PdfloadEx executes the 'pdfload' operation
// (see pdfload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PdfloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("pdfload", options)
	return out
}

// PdfloadBuffer executes the 'pdfload_buffer' operation
// (see pdfload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PdfloadBuffer(buffer *Blob) *Image {
	return PdfloadBufferEx(buffer, nil)
}

// PdfloadBufferEx executes the 'pdfload_buffer' operation
// (see pdfload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PdfloadBufferEx(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(BlobInput("buffer", buffer))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("pdfload_buffer", options)
	return out
}

// Percent executes the 'percent' operation
// (see percent at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Percent(percent float64) int {
	return image.PercentEx(percent, nil)
}

// PercentEx executes the 'percent' operation
// (see percent at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) PercentEx(percent float64, options *Options) int {
	var threshold int
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(DoubleInput("percent", percent))
		options.With(IntOutput("threshold", &threshold))
	}
	vipsCall("percent", options)
	return threshold
}

// Perlin executes the 'perlin' operation
// (see perlin at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Perlin(width int, height int) *Image {
	return PerlinEx(width, height, nil)
}

// PerlinEx executes the 'perlin' operation
// (see perlin at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PerlinEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("perlin", options)
	return out
}

// Phasecor executes the 'phasecor' operation
// (see phasecor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Phasecor(in2 *Image) *Image {
	return image.PhasecorEx(in2, nil)
}

// PhasecorEx executes the 'phasecor' operation
// (see phasecor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) PhasecorEx(in2 *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageInput("in2", in2))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("phasecor", options)
	return out
}

// Pngload executes the 'pngload' operation
// (see pngload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Pngload(filename string) *Image {
	return PngloadEx(filename, nil)
}

// PngloadEx executes the 'pngload' operation
// (see pngload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PngloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("pngload", options)
	return out
}

// PngloadBuffer executes the 'pngload_buffer' operation
// (see pngload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PngloadBuffer(buffer *Blob) *Image {
	return PngloadBufferEx(buffer, nil)
}

// PngloadBufferEx executes the 'pngload_buffer' operation
// (see pngload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PngloadBufferEx(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(BlobInput("buffer", buffer))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("pngload_buffer", options)
	return out
}

// Pngsave executes the 'pngsave' operation
// (see pngsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Pngsave(filename string) {
	image.PngsaveEx(filename, nil)
}

// PngsaveEx executes the 'pngsave' operation
// (see pngsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) PngsaveEx(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(StringInput("filename", filename))
	}
	vipsCall("pngsave", options)
}

// PngsaveBuffer executes the 'pngsave_buffer' operation
// (see pngsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) PngsaveBuffer() *Blob {
	return image.PngsaveBufferEx(nil)
}

// PngsaveBufferEx executes the 'pngsave_buffer' operation
// (see pngsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) PngsaveBufferEx(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(BlobOutput("buffer", &buffer))
	}
	vipsCall("pngsave_buffer", options)
	return buffer
}

// Ppmload executes the 'ppmload' operation
// (see ppmload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Ppmload(filename string) *Image {
	return PpmloadEx(filename, nil)
}

// PpmloadEx executes the 'ppmload' operation
// (see ppmload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func PpmloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("ppmload", options)
	return out
}

// Ppmsave executes the 'ppmsave' operation
// (see ppmsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Ppmsave(filename string) {
	image.PpmsaveEx(filename, nil)
}

// PpmsaveEx executes the 'ppmsave' operation
// (see ppmsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) PpmsaveEx(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(StringInput("filename", filename))
	}
	vipsCall("ppmsave", options)
}

// Premultiply executes the 'premultiply' operation
// (see premultiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Premultiply() *Image {
	return image.PremultiplyEx(nil)
}

// PremultiplyEx executes the 'premultiply' operation
// (see premultiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) PremultiplyEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("premultiply", options)
	return out
}

// Profile executes the 'profile' operation
// (see profile at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Profile(rows **Image) *Image {
	return image.ProfileEx(rows, nil)
}

// ProfileEx executes the 'profile' operation
// (see profile at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ProfileEx(rows **Image, options *Options) *Image {
	var columns *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("columns", &columns))
		options.With(ImageOutput("rows", rows))
	}
	vipsCall("profile", options)
	return columns
}

// Project executes the 'project' operation
// (see project at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Project(rows **Image) *Image {
	return image.ProjectEx(rows, nil)
}

// ProjectEx executes the 'project' operation
// (see project at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ProjectEx(rows **Image, options *Options) *Image {
	var columns *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("columns", &columns))
		options.With(ImageOutput("rows", rows))
	}
	vipsCall("project", options)
	return columns
}

// Quadratic executes the 'quadratic' operation
// (see quadratic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Quadratic(coeff *Image) *Image {
	return image.QuadraticEx(coeff, nil)
}

// QuadraticEx executes the 'quadratic' operation
// (see quadratic at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) QuadraticEx(coeff *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("coeff", coeff))
	}
	vipsCall("quadratic", options)
	return out
}

// Rad2Float executes the 'rad2float' operation
// (see rad2float at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rad2Float() *Image {
	return image.Rad2FloatEx(nil)
}

// Rad2FloatEx executes the 'rad2float' operation
// (see rad2float at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rad2FloatEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("rad2float", options)
	return out
}

// Radload executes the 'radload' operation
// (see radload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Radload(filename string) *Image {
	return RadloadEx(filename, nil)
}

// RadloadEx executes the 'radload' operation
// (see radload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func RadloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("radload", options)
	return out
}

// Radsave executes the 'radsave' operation
// (see radsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Radsave(filename string) {
	image.RadsaveEx(filename, nil)
}

// RadsaveEx executes the 'radsave' operation
// (see radsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RadsaveEx(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(StringInput("filename", filename))
	}
	vipsCall("radsave", options)
}

// RadsaveBuffer executes the 'radsave_buffer' operation
// (see radsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RadsaveBuffer() *Blob {
	return image.RadsaveBufferEx(nil)
}

// RadsaveBufferEx executes the 'radsave_buffer' operation
// (see radsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RadsaveBufferEx(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(BlobOutput("buffer", &buffer))
	}
	vipsCall("radsave_buffer", options)
	return buffer
}

// Rank executes the 'rank' operation
// (see rank at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rank(width int, height int, index int) *Image {
	return image.RankEx(width, height, index, nil)
}

// RankEx executes the 'rank' operation
// (see rank at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RankEx(width int, height int, index int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(IntInput("index", index))
	}
	vipsCall("rank", options)
	return out
}

// Rawload executes the 'rawload' operation
// (see rawload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Rawload(filename string, width int, height int, bands int) *Image {
	return RawloadEx(filename, width, height, bands, nil)
}

// RawloadEx executes the 'rawload' operation
// (see rawload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func RawloadEx(filename string, width int, height int, bands int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
		options.With(IntInput("bands", bands))
	}
	vipsCall("rawload", options)
	return out
}

// Rawsave executes the 'rawsave' operation
// (see rawsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rawsave(filename string) {
	image.RawsaveEx(filename, nil)
}

// RawsaveEx executes the 'rawsave' operation
// (see rawsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RawsaveEx(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(StringInput("filename", filename))
	}
	vipsCall("rawsave", options)
}

// RawsaveFd executes the 'rawsave_fd' operation
// (see rawsave_fd at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RawsaveFd(fd int) {
	image.RawsaveFdEx(fd, nil)
}

// RawsaveFdEx executes the 'rawsave_fd' operation
// (see rawsave_fd at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RawsaveFdEx(fd int, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(IntInput("fd", fd))
	}
	vipsCall("rawsave_fd", options)
}

// Recomb executes the 'recomb' operation
// (see recomb at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Recomb(m *Image) *Image {
	return image.RecombEx(m, nil)
}

// RecombEx executes the 'recomb' operation
// (see recomb at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RecombEx(m *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(ImageInput("m", m))
	}
	vipsCall("recomb", options)
	return out
}

// Reduce executes the 'reduce' operation
// (see reduce at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Reduce(hshrink float64, vshrink float64) *Image {
	return image.ReduceEx(hshrink, vshrink, nil)
}

// ReduceEx executes the 'reduce' operation
// (see reduce at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ReduceEx(hshrink float64, vshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(DoubleInput("hshrink", hshrink))
		options.With(DoubleInput("vshrink", vshrink))
	}
	vipsCall("reduce", options)
	return out
}

// Reduceh executes the 'reduceh' operation
// (see reduceh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Reduceh(hshrink float64) *Image {
	return image.ReducehEx(hshrink, nil)
}

// ReducehEx executes the 'reduceh' operation
// (see reduceh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ReducehEx(hshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(DoubleInput("hshrink", hshrink))
	}
	vipsCall("reduceh", options)
	return out
}

// Reducev executes the 'reducev' operation
// (see reducev at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Reducev(vshrink float64) *Image {
	return image.ReducevEx(vshrink, nil)
}

// ReducevEx executes the 'reducev' operation
// (see reducev at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ReducevEx(vshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(DoubleInput("vshrink", vshrink))
	}
	vipsCall("reducev", options)
	return out
}

// Relational executes the 'relational' operation
// (see relational at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Relational(right *Image, relational OperationRelational) *Image {
	return image.RelationalEx(right, relational, nil)
}

// RelationalEx executes the 'relational' operation
// (see relational at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RelationalEx(right *Image, relational OperationRelational, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("relational", int(relational)))
	}
	vipsCall("relational", options)
	return out
}

// Remainder executes the 'remainder' operation
// (see remainder at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Remainder(right *Image) *Image {
	return image.RemainderEx(right, nil)
}

// RemainderEx executes the 'remainder' operation
// (see remainder at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RemainderEx(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("remainder", options)
	return out
}

// Replicate executes the 'replicate' operation
// (see replicate at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Replicate(across int, down int) *Image {
	return image.ReplicateEx(across, down, nil)
}

// ReplicateEx executes the 'replicate' operation
// (see replicate at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ReplicateEx(across int, down int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("across", across))
		options.With(IntInput("down", down))
	}
	vipsCall("replicate", options)
	return out
}

// Resize executes the 'resize' operation
// (see resize at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Resize(scale float64) *Image {
	return image.ResizeEx(scale, nil)
}

// ResizeEx executes the 'resize' operation
// (see resize at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ResizeEx(scale float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(DoubleInput("scale", scale))
	}
	vipsCall("resize", options)
	return out
}

// Rot executes the 'rot' operation
// (see rot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rot(angle Angle) *Image {
	return image.RotEx(angle, nil)
}

// RotEx executes the 'rot' operation
// (see rot at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RotEx(angle Angle, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("angle", int(angle)))
	}
	vipsCall("rot", options)
	return out
}

// Rot45 executes the 'rot45' operation
// (see rot45 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rot45() *Image {
	return image.Rot45Ex(nil)
}

// Rot45Ex executes the 'rot45' operation
// (see rot45 at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Rot45Ex(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("rot45", options)
	return out
}

// Round executes the 'round' operation
// (see round at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Round(round OperationRound) *Image {
	return image.RoundEx(round, nil)
}

// RoundEx executes the 'round' operation
// (see round at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) RoundEx(round OperationRound, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("round", int(round)))
	}
	vipsCall("round", options)
	return out
}

// Scale executes the 'scale' operation
// (see scale at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scale() *Image {
	return image.ScaleEx(nil)
}

// ScaleEx executes the 'scale' operation
// (see scale at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ScaleEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("scale", options)
	return out
}

// Scrgb2Bw executes the 'scRGB2BW' operation
// (see scRGB2BW at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2Bw() *Image {
	return image.Scrgb2BwEx(nil)
}

// Scrgb2BwEx executes the 'scRGB2BW' operation
// (see scRGB2BW at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2BwEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("scRGB2BW", options)
	return out
}

// Scrgb2Srgb executes the 'scRGB2sRGB' operation
// (see scRGB2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2Srgb() *Image {
	return image.Scrgb2SrgbEx(nil)
}

// Scrgb2SrgbEx executes the 'scRGB2sRGB' operation
// (see scRGB2sRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2SrgbEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("scRGB2sRGB", options)
	return out
}

// Scrgb2Xyz executes the 'scRGB2XYZ' operation
// (see scRGB2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2Xyz() *Image {
	return image.Scrgb2XyzEx(nil)
}

// Scrgb2XyzEx executes the 'scRGB2XYZ' operation
// (see scRGB2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Scrgb2XyzEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("scRGB2XYZ", options)
	return out
}

// Sequential executes the 'sequential' operation
// (see sequential at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Sequential() *Image {
	return image.SequentialEx(nil)
}

// SequentialEx executes the 'sequential' operation
// (see sequential at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) SequentialEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("sequential", options)
	return out
}

// Sharpen executes the 'sharpen' operation
// (see sharpen at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Sharpen() *Image {
	return image.SharpenEx(nil)
}

// SharpenEx executes the 'sharpen' operation
// (see sharpen at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) SharpenEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("sharpen", options)
	return out
}

// Shrink executes the 'shrink' operation
// (see shrink at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Shrink(hshrink float64, vshrink float64) *Image {
	return image.ShrinkEx(hshrink, vshrink, nil)
}

// ShrinkEx executes the 'shrink' operation
// (see shrink at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ShrinkEx(hshrink float64, vshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(DoubleInput("hshrink", hshrink))
		options.With(DoubleInput("vshrink", vshrink))
	}
	vipsCall("shrink", options)
	return out
}

// Shrinkh executes the 'shrinkh' operation
// (see shrinkh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Shrinkh(hshrink int) *Image {
	return image.ShrinkhEx(hshrink, nil)
}

// ShrinkhEx executes the 'shrinkh' operation
// (see shrinkh at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ShrinkhEx(hshrink int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("hshrink", hshrink))
	}
	vipsCall("shrinkh", options)
	return out
}

// Shrinkv executes the 'shrinkv' operation
// (see shrinkv at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Shrinkv(vshrink int) *Image {
	return image.ShrinkvEx(vshrink, nil)
}

// ShrinkvEx executes the 'shrinkv' operation
// (see shrinkv at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ShrinkvEx(vshrink int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("vshrink", vshrink))
	}
	vipsCall("shrinkv", options)
	return out
}

// Sign executes the 'sign' operation
// (see sign at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Sign() *Image {
	return image.SignEx(nil)
}

// SignEx executes the 'sign' operation
// (see sign at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) SignEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("sign", options)
	return out
}

// Similarity executes the 'similarity' operation
// (see similarity at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Similarity() *Image {
	return image.SimilarityEx(nil)
}

// SimilarityEx executes the 'similarity' operation
// (see similarity at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) SimilarityEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("similarity", options)
	return out
}

// Sines executes the 'sines' operation
// (see sines at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Sines(width int, height int) *Image {
	return SinesEx(width, height, nil)
}

// SinesEx executes the 'sines' operation
// (see sines at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func SinesEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("sines", options)
	return out
}

// Smartcrop executes the 'smartcrop' operation
// (see smartcrop at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Smartcrop(width int, height int) *Image {
	return image.SmartcropEx(width, height, nil)
}

// SmartcropEx executes the 'smartcrop' operation
// (see smartcrop at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) SmartcropEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("input", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("smartcrop", options)
	return out
}

// Spcor executes the 'spcor' operation
// (see spcor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Spcor(ref *Image) *Image {
	return image.SpcorEx(ref, nil)
}

// SpcorEx executes the 'spcor' operation
// (see spcor at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) SpcorEx(ref *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageInput("ref", ref))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("spcor", options)
	return out
}

// Spectrum executes the 'spectrum' operation
// (see spectrum at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Spectrum() *Image {
	return image.SpectrumEx(nil)
}

// SpectrumEx executes the 'spectrum' operation
// (see spectrum at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) SpectrumEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("spectrum", options)
	return out
}

// Srgb2Hsv executes the 'sRGB2HSV' operation
// (see sRGB2HSV at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Srgb2Hsv() *Image {
	return image.Srgb2HsvEx(nil)
}

// Srgb2HsvEx executes the 'sRGB2HSV' operation
// (see sRGB2HSV at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Srgb2HsvEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("sRGB2HSV", options)
	return out
}

// Srgb2Scrgb executes the 'sRGB2scRGB' operation
// (see sRGB2scRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Srgb2Scrgb() *Image {
	return image.Srgb2ScrgbEx(nil)
}

// Srgb2ScrgbEx executes the 'sRGB2scRGB' operation
// (see sRGB2scRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Srgb2ScrgbEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("sRGB2scRGB", options)
	return out
}

// Stats executes the 'stats' operation
// (see stats at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Stats() *Image {
	return image.StatsEx(nil)
}

// StatsEx executes the 'stats' operation
// (see stats at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) StatsEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("stats", options)
	return out
}

// Stdif executes the 'stdif' operation
// (see stdif at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Stdif(width int, height int) *Image {
	return image.StdifEx(width, height, nil)
}

// StdifEx executes the 'stdif' operation
// (see stdif at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) StdifEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("stdif", options)
	return out
}

// Subsample executes the 'subsample' operation
// (see subsample at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Subsample(xfac int, yfac int) *Image {
	return image.SubsampleEx(xfac, yfac, nil)
}

// SubsampleEx executes the 'subsample' operation
// (see subsample at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) SubsampleEx(xfac int, yfac int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("input", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("xfac", xfac))
		options.With(IntInput("yfac", yfac))
	}
	vipsCall("subsample", options)
	return out
}

// Subtract executes the 'subtract' operation
// (see subtract at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Subtract(right *Image) *Image {
	return image.SubtractEx(right, nil)
}

// SubtractEx executes the 'subtract' operation
// (see subtract at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) SubtractEx(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("left", image))
		options.With(ImageInput("right", right))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("subtract", options)
	return out
}

// Svgload executes the 'svgload' operation
// (see svgload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Svgload(filename string) *Image {
	return SvgloadEx(filename, nil)
}

// SvgloadEx executes the 'svgload' operation
// (see svgload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func SvgloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("svgload", options)
	return out
}

// SvgloadBuffer executes the 'svgload_buffer' operation
// (see svgload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func SvgloadBuffer(buffer *Blob) *Image {
	return SvgloadBufferEx(buffer, nil)
}

// SvgloadBufferEx executes the 'svgload_buffer' operation
// (see svgload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func SvgloadBufferEx(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(BlobInput("buffer", buffer))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("svgload_buffer", options)
	return out
}

// System executes the 'system' operation
// (see system at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func System(cmdFormat string) {
	SystemEx(cmdFormat, nil)
}

// SystemEx executes the 'system' operation
// (see system at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func SystemEx(cmdFormat string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(StringInput("cmd-format", cmdFormat))
	}
	vipsCall("system", options)
}

// Text executes the 'text' operation
// (see text at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Text(text string) *Image {
	return TextEx(text, nil)
}

// TextEx executes the 'text' operation
// (see text at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func TextEx(text string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(StringInput("text", text))
	}
	vipsCall("text", options)
	return out
}

// Thumbnail executes the 'thumbnail' operation
// (see thumbnail at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Thumbnail(filename string, width int) *Image {
	return ThumbnailEx(filename, width, nil)
}

// ThumbnailEx executes the 'thumbnail' operation
// (see thumbnail at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func ThumbnailEx(filename string, width int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
	}
	vipsCall("thumbnail", options)
	return out
}

// ThumbnailBuffer executes the 'thumbnail_buffer' operation
// (see thumbnail_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func ThumbnailBuffer(buffer *Blob, width int) *Image {
	return ThumbnailBufferEx(buffer, width, nil)
}

// ThumbnailBufferEx executes the 'thumbnail_buffer' operation
// (see thumbnail_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func ThumbnailBufferEx(buffer *Blob, width int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(BlobInput("buffer", buffer))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
	}
	vipsCall("thumbnail_buffer", options)
	return out
}

// Tiffload executes the 'tiffload' operation
// (see tiffload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Tiffload(filename string) *Image {
	return TiffloadEx(filename, nil)
}

// TiffloadEx executes the 'tiffload' operation
// (see tiffload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func TiffloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("tiffload", options)
	return out
}

// TiffloadBuffer executes the 'tiffload_buffer' operation
// (see tiffload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func TiffloadBuffer(buffer *Blob) *Image {
	return TiffloadBufferEx(buffer, nil)
}

// TiffloadBufferEx executes the 'tiffload_buffer' operation
// (see tiffload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func TiffloadBufferEx(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(BlobInput("buffer", buffer))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("tiffload_buffer", options)
	return out
}

// Tiffsave executes the 'tiffsave' operation
// (see tiffsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Tiffsave(filename string) {
	image.TiffsaveEx(filename, nil)
}

// TiffsaveEx executes the 'tiffsave' operation
// (see tiffsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) TiffsaveEx(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(StringInput("filename", filename))
	}
	vipsCall("tiffsave", options)
}

// TiffsaveBuffer executes the 'tiffsave_buffer' operation
// (see tiffsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) TiffsaveBuffer() *Blob {
	return image.TiffsaveBufferEx(nil)
}

// TiffsaveBufferEx executes the 'tiffsave_buffer' operation
// (see tiffsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) TiffsaveBufferEx(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(BlobOutput("buffer", &buffer))
	}
	vipsCall("tiffsave_buffer", options)
	return buffer
}

// Tilecache executes the 'tilecache' operation
// (see tilecache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Tilecache() *Image {
	return image.TilecacheEx(nil)
}

// TilecacheEx executes the 'tilecache' operation
// (see tilecache at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) TilecacheEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("tilecache", options)
	return out
}

// Tonelut executes the 'tonelut' operation
// (see tonelut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Tonelut() *Image {
	return TonelutEx(nil)
}

// TonelutEx executes the 'tonelut' operation
// (see tonelut at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func TonelutEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
	}
	vipsCall("tonelut", options)
	return out
}

// Unpremultiply executes the 'unpremultiply' operation
// (see unpremultiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Unpremultiply() *Image {
	return image.UnpremultiplyEx(nil)
}

// UnpremultiplyEx executes the 'unpremultiply' operation
// (see unpremultiply at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) UnpremultiplyEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("unpremultiply", options)
	return out
}

// Vipsload executes the 'vipsload' operation
// (see vipsload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Vipsload(filename string) *Image {
	return VipsloadEx(filename, nil)
}

// VipsloadEx executes the 'vipsload' operation
// (see vipsload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func VipsloadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("vipsload", options)
	return out
}

// Vipssave executes the 'vipssave' operation
// (see vipssave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Vipssave(filename string) {
	image.VipssaveEx(filename, nil)
}

// VipssaveEx executes the 'vipssave' operation
// (see vipssave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) VipssaveEx(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(StringInput("filename", filename))
	}
	vipsCall("vipssave", options)
}

// Webpload executes the 'webpload' operation
// (see webpload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Webpload(filename string) *Image {
	return WebploadEx(filename, nil)
}

// WebploadEx executes the 'webpload' operation
// (see webpload at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func WebploadEx(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(StringInput("filename", filename))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("webpload", options)
	return out
}

// WebploadBuffer executes the 'webpload_buffer' operation
// (see webpload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func WebploadBuffer(buffer *Blob) *Image {
	return WebploadBufferEx(buffer, nil)
}

// WebploadBufferEx executes the 'webpload_buffer' operation
// (see webpload_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func WebploadBufferEx(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(BlobInput("buffer", buffer))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("webpload_buffer", options)
	return out
}

// Webpsave executes the 'webpsave' operation
// (see webpsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Webpsave(filename string) {
	image.WebpsaveEx(filename, nil)
}

// WebpsaveEx executes the 'webpsave' operation
// (see webpsave at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) WebpsaveEx(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(StringInput("filename", filename))
	}
	vipsCall("webpsave", options)
}

// WebpsaveBuffer executes the 'webpsave_buffer' operation
// (see webpsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) WebpsaveBuffer() *Blob {
	return image.WebpsaveBufferEx(nil)
}

// WebpsaveBufferEx executes the 'webpsave_buffer' operation
// (see webpsave_buffer at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) WebpsaveBufferEx(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(BlobOutput("buffer", &buffer))
	}
	vipsCall("webpsave_buffer", options)
	return buffer
}

// Worley executes the 'worley' operation
// (see worley at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Worley(width int, height int) *Image {
	return WorleyEx(width, height, nil)
}

// WorleyEx executes the 'worley' operation
// (see worley at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func WorleyEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("worley", options)
	return out
}

// Wrap executes the 'wrap' operation
// (see wrap at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Wrap() *Image {
	return image.WrapEx(nil)
}

// WrapEx executes the 'wrap' operation
// (see wrap at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) WrapEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("wrap", options)
	return out
}

// Xyz executes the 'xyz' operation
// (see xyz at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Xyz(width int, height int) *Image {
	return XyzEx(width, height, nil)
}

// XyzEx executes the 'xyz' operation
// (see xyz at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func XyzEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("xyz", options)
	return out
}

// Xyz2Lab executes the 'XYZ2Lab' operation
// (see XYZ2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2Lab() *Image {
	return image.Xyz2LabEx(nil)
}

// Xyz2LabEx executes the 'XYZ2Lab' operation
// (see XYZ2Lab at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2LabEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("XYZ2Lab", options)
	return out
}

// Xyz2Scrgb executes the 'XYZ2scRGB' operation
// (see XYZ2scRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2Scrgb() *Image {
	return image.Xyz2ScrgbEx(nil)
}

// Xyz2ScrgbEx executes the 'XYZ2scRGB' operation
// (see XYZ2scRGB at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2ScrgbEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("XYZ2scRGB", options)
	return out
}

// Xyz2Yxy executes the 'XYZ2Yxy' operation
// (see XYZ2Yxy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2Yxy() *Image {
	return image.Xyz2YxyEx(nil)
}

// Xyz2YxyEx executes the 'XYZ2Yxy' operation
// (see XYZ2Yxy at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Xyz2YxyEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("XYZ2Yxy", options)
	return out
}

// Yxy2Xyz executes the 'Yxy2XYZ' operation
// (see Yxy2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Yxy2Xyz() *Image {
	return image.Yxy2XyzEx(nil)
}

// Yxy2XyzEx executes the 'Yxy2XYZ' operation
// (see Yxy2XYZ at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Yxy2XyzEx(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("in", image))
		options.With(ImageOutput("out", &out))
	}
	vipsCall("Yxy2XYZ", options)
	return out
}

// Zone executes the 'zone' operation
// (see zone at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func Zone(width int, height int) *Image {
	return ZoneEx(width, height, nil)
}

// ZoneEx executes the 'zone' operation
// (see zone at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func ZoneEx(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageOutput("out", &out))
		options.With(IntInput("width", width))
		options.With(IntInput("height", height))
	}
	vipsCall("zone", options)
	return out
}

// Zoom executes the 'zoom' operation
// (see zoom at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) Zoom(xfac int, yfac int) *Image {
	return image.ZoomEx(xfac, yfac, nil)
}

// ZoomEx executes the 'zoom' operation
// (see zoom at http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/func-list.html)
func (image *Image) ZoomEx(xfac int, yfac int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
		options.With(ImageInput("input", image))
		options.With(ImageOutput("out", &out))
		options.With(IntInput("xfac", xfac))
		options.With(IntInput("yfac", yfac))
	}
	vipsCall("zoom", options)
	return out
}
