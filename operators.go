package gimage

/***
 * NOTE: This file is autogenerated so you shouldn't modify it.
 * See scripts/gen-operators.py
 *
 * Generated at 09:08PM on December 29, 2016
 */

// #cgo pkg-config: vips
// #include "vips/vips.h"
import "C"

// Unsupported: affine
// Unsupported: arrayjoin
// Unsupported: bandjoin
// Unsupported: bandjoin_const
// Unsupported: bandrank
// Unsupported: boolean_const
// Unsupported: draw_circle
// Unsupported: draw_flood
// Unsupported: draw_line
// Unsupported: draw_mask
// Unsupported: draw_rect
// Unsupported: getpoint
// Unsupported: linear
// Unsupported: math2_const
// Unsupported: relational_const
// Unsupported: remainder_const
// Unsupported: sum

func (image *Image) Abs(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("abs", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Add(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("add", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Autorot(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("autorot", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Avg(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
	}
	Call("avg", options.
		SetImage("in", image).
		SetDoubleOut("out", &out))
	return out
}

func (image *Image) Bandbool(boolean OperationBoolean, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("bandbool", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("boolean", int(boolean)))
	return out
}

func (image *Image) Bandfold(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("bandfold", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Bandmean(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("bandmean", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Bandunfold(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("bandunfold", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Boolean(right *Image, boolean OperationBoolean, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("boolean", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out).
		SetInt("boolean", int(boolean)))
	return out
}

func (image *Image) Buildlut(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("buildlut", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Byteswap(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("byteswap", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Cache(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("cache", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Cast(format BandFormat, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("cast", options.
		SetImageOut("out", &out).
		SetImage("in", image).
		SetInt("format", int(format)))
	return out
}

func (image *Image) Cmc2Lch(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("CMC2LCh", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Colourspace(space Interpretation, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("colourspace", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("space", int(space)))
	return out
}

func (image *Image) Compass(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("compass", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask))
	return out
}

func (image *Image) Complex(cmplx OperationComplex, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("complex", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("cmplx", int(cmplx)))
	return out
}

func (image *Image) Complex2(right *Image, cmplx OperationComplex2, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("complex2", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out).
		SetInt("cmplx", int(cmplx)))
	return out
}

func (image *Image) Complexform(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("complexform", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Complexget(get OperationComplexGet, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("complexget", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("get", int(get)))
	return out
}

func (image *Image) Conv(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("conv", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask))
	return out
}

func (image *Image) Conva(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("conva", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask))
	return out
}

func (image *Image) Convasep(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("convasep", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask))
	return out
}

func (image *Image) Convf(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("convf", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask))
	return out
}

func (image *Image) Convi(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("convi", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask))
	return out
}

func (image *Image) Convsep(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("convsep", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask))
	return out
}

func (image *Image) Copy(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("copy", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Countlines(direction Direction, options *Options) float64 {
	var nolines float64
	if options == nil {
		options = NewOptions()
	}
	Call("countlines", options.
		SetImage("in", image).
		SetDoubleOut("nolines", &nolines).
		SetInt("direction", int(direction)))
	return nolines
}

func (image *Image) Csvsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("csvsave", options.
		SetImage("in", image).
		SetString("filename", filename))
}

func (image *Image) De00(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("dE00", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out))
	return out
}

func (image *Image) De76(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("dE76", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Decmc(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("dECMC", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Deviate(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
	}
	Call("deviate", options.
		SetImage("in", image).
		SetDoubleOut("out", &out))
	return out
}

func (image *Image) Divide(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("divide", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out))
	return out
}

func (image *Image) DrawImage(sub *Image, x int, y int, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("draw_image", options.
		SetImage("image", image).
		SetImage("sub", sub).
		SetInt("x", x).
		SetInt("y", y))
}

func (image *Image) DrawSmudge(left int, top int, width int, height int, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("draw_smudge", options.
		SetImage("image", image).
		SetInt("left", left).
		SetInt("top", top).
		SetInt("width", width).
		SetInt("height", height))
}

func (image *Image) Dzsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("dzsave", options.
		SetImage("in", image).
		SetString("filename", filename))
}

func (image *Image) Embed(x int, y int, width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("embed", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("x", x).
		SetInt("y", y).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func (image *Image) ExtractArea(left int, top int, width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("extract_area", options.
		SetImage("input", image).
		SetImageOut("out", &out).
		SetInt("left", left).
		SetInt("top", top).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func (image *Image) ExtractBand(band int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("extract_band", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("band", band))
	return out
}

func (image *Image) Falsecolour(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("falsecolour", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Fastcor(ref *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("fastcor", options.
		SetImage("in", image).
		SetImage("ref", ref).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Flatten(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("flatten", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Flip(direction Direction, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("flip", options.
		SetImageOut("out", &out).
		SetImage("in", image).
		SetInt("direction", int(direction)))
	return out
}

func (image *Image) Float2Rad(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("float2rad", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Freqmult(mask *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("freqmult", options.
		SetImage("in", image).
		SetImage("mask", mask).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Fwfft(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("fwfft", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Gamma(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("gamma", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Gaussblur(sigma float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("gaussblur", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("sigma", sigma))
	return out
}

func (image *Image) Globalbalance(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("globalbalance", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Grid(tile_height int, across int, down int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("grid", options.
		SetImageOut("out", &out).
		SetImage("in", image).
		SetInt("tile-height", tile_height).
		SetInt("across", across).
		SetInt("down", down))
	return out
}

func (image *Image) HistCum(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("hist_cum", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) HistEntropy(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
	}
	Call("hist_entropy", options.
		SetImage("in", image).
		SetDoubleOut("out", &out))
	return out
}

func (image *Image) HistEqual(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("hist_equal", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) HistFind(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("hist_find", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) HistFindIndexed(index *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("hist_find_indexed", options.
		SetImage("in", image).
		SetImage("index", index).
		SetImageOut("out", &out))
	return out
}

func (image *Image) HistFindNdim(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("hist_find_ndim", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) HistIsmonotonic(options *Options) bool {
	var monotonic bool
	if options == nil {
		options = NewOptions()
	}
	Call("hist_ismonotonic", options.
		SetImage("in", image).
		SetBoolOut("monotonic", &monotonic))
	return monotonic
}

func (image *Image) HistLocal(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("hist_local", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func (image *Image) HistMatch(ref *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("hist_match", options.
		SetImage("in", image).
		SetImage("ref", ref).
		SetImageOut("out", &out))
	return out
}

func (image *Image) HistNorm(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("hist_norm", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) HistPlot(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("hist_plot", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) HoughCircle(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("hough_circle", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) HoughLine(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("hough_line", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Hsv2Srgb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("HSV2sRGB", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) IccExport(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("icc_export", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) IccImport(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("icc_import", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) IccTransform(output_profile string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("icc_transform", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetString("output-profile", output_profile))
	return out
}

func (image *Image) Ifthenelse(in1 *Image, in2 *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("ifthenelse", options.
		SetImage("cond", image).
		SetImage("in1", in1).
		SetImage("in2", in2).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Insert(sub *Image, x int, y int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("insert", options.
		SetImage("main", image).
		SetImage("sub", sub).
		SetImageOut("out", &out).
		SetInt("x", x).
		SetInt("y", y))
	return out
}

func (image *Image) Invert(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("invert", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Invertlut(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("invertlut", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Invfft(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("invfft", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Join(in2 *Image, direction Direction, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("join", options.
		SetImage("in1", image).
		SetImage("in2", in2).
		SetImageOut("out", &out).
		SetInt("direction", int(direction)))
	return out
}

func (image *Image) Jpegsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("jpegsave", options.
		SetImage("in", image).
		SetString("filename", filename))
}

func (image *Image) JpegsaveBuffer(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
	}
	Call("jpegsave_buffer", options.
		SetImage("in", image).
		SetBlobOut("buffer", &buffer))
	return buffer
}

func (image *Image) JpegsaveMime(options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("jpegsave_mime", options.
		SetImage("in", image))
}

func (image *Image) Lab2Labq(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("Lab2LabQ", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Lab2Labs(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("Lab2LabS", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Lab2Lch(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("Lab2LCh", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Lab2Xyz(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("Lab2XYZ", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Labelregions(options *Options) *Image {
	var mask *Image
	if options == nil {
		options = NewOptions()
	}
	Call("labelregions", options.
		SetImage("in", image).
		SetImageOut("mask", &mask))
	return mask
}

func (image *Image) Labq2Lab(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("LabQ2Lab", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Labq2Labs(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("LabQ2LabS", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Labq2Srgb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("LabQ2sRGB", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Labs2Lab(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("LabS2Lab", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Labs2Labq(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("LabS2LabQ", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Lch2Cmc(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("LCh2CMC", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Lch2Lab(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("LCh2Lab", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Linecache(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("linecache", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Mapim(index *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mapim", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("index", index))
	return out
}

func (image *Image) Maplut(lut *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("maplut", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("lut", lut))
	return out
}

func (image *Image) Match(sec *Image, xr1 int, yr1 int, xs1 int, ys1 int, xr2 int, yr2 int, xs2 int, ys2 int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("match", options.
		SetImage("ref", image).
		SetImage("sec", sec).
		SetImageOut("out", &out).
		SetInt("xr1", xr1).
		SetInt("yr1", yr1).
		SetInt("xs1", xs1).
		SetInt("ys1", ys1).
		SetInt("xr2", xr2).
		SetInt("yr2", yr2).
		SetInt("xs2", xs2).
		SetInt("ys2", ys2))
	return out
}

func (image *Image) Math(math OperationMath, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("math", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("math", int(math)))
	return out
}

func (image *Image) Math2(right *Image, math2 OperationMath2, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("math2", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out).
		SetInt("math2", int(math2)))
	return out
}

func (image *Image) Matrixprint(options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("matrixprint", options.
		SetImage("in", image))
}

func (image *Image) Matrixsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("matrixsave", options.
		SetImage("in", image).
		SetString("filename", filename))
}

func (image *Image) Max(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
	}
	Call("max", options.
		SetImage("in", image).
		SetDoubleOut("out", &out))
	return out
}

func (image *Image) Measure(h int, v int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("measure", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("h", h).
		SetInt("v", v))
	return out
}

func (image *Image) Merge(sec *Image, direction Direction, dx int, dy int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("merge", options.
		SetImage("ref", image).
		SetImage("sec", sec).
		SetImageOut("out", &out).
		SetInt("direction", int(direction)).
		SetInt("dx", dx).
		SetInt("dy", dy))
	return out
}

func (image *Image) Min(options *Options) float64 {
	var out float64
	if options == nil {
		options = NewOptions()
	}
	Call("min", options.
		SetImage("in", image).
		SetDoubleOut("out", &out))
	return out
}

func (image *Image) Morph(mask *Image, morph OperationMorphology, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("morph", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("mask", mask).
		SetInt("morph", int(morph)))
	return out
}

func (image *Image) Mosaic(sec *Image, direction Direction, xref int, yref int, xsec int, ysec int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mosaic", options.
		SetImage("ref", image).
		SetImage("sec", sec).
		SetImageOut("out", &out).
		SetInt("direction", int(direction)).
		SetInt("xref", xref).
		SetInt("yref", yref).
		SetInt("xsec", xsec).
		SetInt("ysec", ysec))
	return out
}

func (image *Image) Mosaic1(sec *Image, direction Direction, xr1 int, yr1 int, xs1 int, ys1 int, xr2 int, yr2 int, xs2 int, ys2 int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mosaic1", options.
		SetImage("ref", image).
		SetImage("sec", sec).
		SetImageOut("out", &out).
		SetInt("direction", int(direction)).
		SetInt("xr1", xr1).
		SetInt("yr1", yr1).
		SetInt("xs1", xs1).
		SetInt("ys1", ys1).
		SetInt("xr2", xr2).
		SetInt("yr2", yr2).
		SetInt("xs2", xs2).
		SetInt("ys2", ys2))
	return out
}

func (image *Image) Msb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("msb", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Multiply(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("multiply", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Percent(percent float64, options *Options) int {
	var threshold int
	if options == nil {
		options = NewOptions()
	}
	Call("percent", options.
		SetImage("in", image).
		SetDouble("percent", percent).
		SetIntOut("threshold", &threshold))
	return threshold
}

func (image *Image) Phasecor(in2 *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("phasecor", options.
		SetImage("in", image).
		SetImage("in2", in2).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Pngsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("pngsave", options.
		SetImage("in", image).
		SetString("filename", filename))
}

func (image *Image) PngsaveBuffer(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
	}
	Call("pngsave_buffer", options.
		SetImage("in", image).
		SetBlobOut("buffer", &buffer))
	return buffer
}

func (image *Image) Ppmsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("ppmsave", options.
		SetImage("in", image).
		SetString("filename", filename))
}

func (image *Image) Premultiply(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("premultiply", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Profile(rows **Image, options *Options) *Image {
	var columns *Image
	if options == nil {
		options = NewOptions()
	}
	Call("profile", options.
		SetImage("in", image).
		SetImageOut("columns", &columns).
		SetImageOut("rows", rows))
	return columns
}

func (image *Image) Project(rows **Image, options *Options) *Image {
	var columns *Image
	if options == nil {
		options = NewOptions()
	}
	Call("project", options.
		SetImage("in", image).
		SetImageOut("columns", &columns).
		SetImageOut("rows", rows))
	return columns
}

func (image *Image) Quadratic(coeff *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("quadratic", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("coeff", coeff))
	return out
}

func (image *Image) Rad2Float(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("rad2float", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Radsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("radsave", options.
		SetImage("in", image).
		SetString("filename", filename))
}

func (image *Image) RadsaveBuffer(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
	}
	Call("radsave_buffer", options.
		SetImage("in", image).
		SetBlobOut("buffer", &buffer))
	return buffer
}

func (image *Image) Rank(width int, height int, index int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("rank", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetInt("index", index))
	return out
}

func (image *Image) Rawsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("rawsave", options.
		SetImage("in", image).
		SetString("filename", filename))
}

func (image *Image) RawsaveFd(fd int, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("rawsave_fd", options.
		SetImage("in", image).
		SetInt("fd", fd))
}

func (image *Image) Recomb(m *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("recomb", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetImage("m", m))
	return out
}

func (image *Image) Reduce(hshrink float64, vshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("reduce", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("hshrink", hshrink).
		SetDouble("vshrink", vshrink))
	return out
}

func (image *Image) Reduceh(hshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("reduceh", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("hshrink", hshrink))
	return out
}

func (image *Image) Reducev(vshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("reducev", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("vshrink", vshrink))
	return out
}

func (image *Image) Relational(right *Image, relational OperationRelational, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("relational", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out).
		SetInt("relational", int(relational)))
	return out
}

func (image *Image) Remainder(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("remainder", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Replicate(across int, down int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("replicate", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("across", across).
		SetInt("down", down))
	return out
}

func (image *Image) Resize(scale float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("resize", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("scale", scale))
	return out
}

func (image *Image) Rot(angle Angle, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("rot", options.
		SetImageOut("out", &out).
		SetImage("in", image).
		SetInt("angle", int(angle)))
	return out
}

func (image *Image) Rot45(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("rot45", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Round(round OperationRound, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("round", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("round", int(round)))
	return out
}

func (image *Image) Scale(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("scale", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Scrgb2Bw(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("scRGB2BW", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Scrgb2Srgb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("scRGB2sRGB", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Scrgb2Xyz(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("scRGB2XYZ", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Sequential(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("sequential", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Sharpen(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("sharpen", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Shrink(hshrink float64, vshrink float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("shrink", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetDouble("hshrink", hshrink).
		SetDouble("vshrink", vshrink))
	return out
}

func (image *Image) Shrinkh(hshrink int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("shrinkh", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("hshrink", hshrink))
	return out
}

func (image *Image) Shrinkv(vshrink int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("shrinkv", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("vshrink", vshrink))
	return out
}

func (image *Image) Sign(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("sign", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Similarity(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("similarity", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Spcor(ref *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("spcor", options.
		SetImage("in", image).
		SetImage("ref", ref).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Spectrum(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("spectrum", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Srgb2Hsv(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("sRGB2HSV", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Srgb2Scrgb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("sRGB2scRGB", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Stats(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("stats", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Stdif(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("stdif", options.
		SetImage("in", image).
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func (image *Image) Subsample(xfac int, yfac int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("subsample", options.
		SetImage("input", image).
		SetImageOut("out", &out).
		SetInt("xfac", xfac).
		SetInt("yfac", yfac))
	return out
}

func (image *Image) Subtract(right *Image, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("subtract", options.
		SetImage("left", image).
		SetImage("right", right).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Tiffsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("tiffsave", options.
		SetImage("in", image).
		SetString("filename", filename))
}

func (image *Image) Tilecache(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("tilecache", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Unpremultiply(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("unpremultiply", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Vipssave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("vipssave", options.
		SetImage("in", image).
		SetString("filename", filename))
}

func (image *Image) Webpsave(filename string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("webpsave", options.
		SetImage("in", image).
		SetString("filename", filename))
}

func (image *Image) WebpsaveBuffer(options *Options) *Blob {
	var buffer *Blob
	if options == nil {
		options = NewOptions()
	}
	Call("webpsave_buffer", options.
		SetImage("in", image).
		SetBlobOut("buffer", &buffer))
	return buffer
}

func (image *Image) Wrap(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("wrap", options.
		SetImageOut("out", &out).
		SetImage("in", image))
	return out
}

func (image *Image) Xyz2Lab(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("XYZ2Lab", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Xyz2Scrgb(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("XYZ2scRGB", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Xyz2Yxy(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("XYZ2Yxy", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Yxy2Xyz(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("Yxy2XYZ", options.
		SetImage("in", image).
		SetImageOut("out", &out))
	return out
}

func (image *Image) Zoom(xfac int, yfac int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("zoom", options.
		SetImage("input", image).
		SetImageOut("out", &out).
		SetInt("xfac", xfac).
		SetInt("yfac", yfac))
	return out
}

func Analyzeload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("analyzeload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func Black(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("black", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func Csvload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("csvload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func Eye(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("eye", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func Fractsurf(width int, height int, fractal_dimension float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("fractsurf", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("fractal-dimension", fractal_dimension))
	return out
}

func Gaussmat(sigma float64, min_ampl float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("gaussmat", options.
		SetImageOut("out", &out).
		SetDouble("sigma", sigma).
		SetDouble("min-ampl", min_ampl))
	return out
}

func Gaussnoise(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("gaussnoise", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func Gifload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("gifload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func GifloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("gifload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out))
	return out
}

func Grey(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("grey", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func Identity(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("identity", options.
		SetImageOut("out", &out))
	return out
}

func Jpegload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("jpegload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func JpegloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("jpegload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out))
	return out
}

func Logmat(sigma float64, min_ampl float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("logmat", options.
		SetImageOut("out", &out).
		SetDouble("sigma", sigma).
		SetDouble("min-ampl", min_ampl))
	return out
}

func Magickload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("magickload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func MagickloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("magickload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out))
	return out
}

func MaskButterworth(width int, height int, order float64, frequency_cutoff float64, amplitude_cutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mask_butterworth", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("order", order).
		SetDouble("frequency-cutoff", frequency_cutoff).
		SetDouble("amplitude-cutoff", amplitude_cutoff))
	return out
}

func MaskButterworthBand(width int, height int, order float64, frequency_cutoff_x float64, frequency_cutoff_y float64, radius float64, amplitude_cutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mask_butterworth_band", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("order", order).
		SetDouble("frequency-cutoff-x", frequency_cutoff_x).
		SetDouble("frequency-cutoff-y", frequency_cutoff_y).
		SetDouble("radius", radius).
		SetDouble("amplitude-cutoff", amplitude_cutoff))
	return out
}

func MaskButterworthRing(width int, height int, order float64, frequency_cutoff float64, amplitude_cutoff float64, ringwidth float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mask_butterworth_ring", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("order", order).
		SetDouble("frequency-cutoff", frequency_cutoff).
		SetDouble("amplitude-cutoff", amplitude_cutoff).
		SetDouble("ringwidth", ringwidth))
	return out
}

func MaskFractal(width int, height int, fractal_dimension float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mask_fractal", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("fractal-dimension", fractal_dimension))
	return out
}

func MaskGaussian(width int, height int, frequency_cutoff float64, amplitude_cutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mask_gaussian", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff", frequency_cutoff).
		SetDouble("amplitude-cutoff", amplitude_cutoff))
	return out
}

func MaskGaussianBand(width int, height int, frequency_cutoff_x float64, frequency_cutoff_y float64, radius float64, amplitude_cutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mask_gaussian_band", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff-x", frequency_cutoff_x).
		SetDouble("frequency-cutoff-y", frequency_cutoff_y).
		SetDouble("radius", radius).
		SetDouble("amplitude-cutoff", amplitude_cutoff))
	return out
}

func MaskGaussianRing(width int, height int, frequency_cutoff float64, amplitude_cutoff float64, ringwidth float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mask_gaussian_ring", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff", frequency_cutoff).
		SetDouble("amplitude-cutoff", amplitude_cutoff).
		SetDouble("ringwidth", ringwidth))
	return out
}

func MaskIdeal(width int, height int, frequency_cutoff float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mask_ideal", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff", frequency_cutoff))
	return out
}

func MaskIdealBand(width int, height int, frequency_cutoff_x float64, frequency_cutoff_y float64, radius float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mask_ideal_band", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff-x", frequency_cutoff_x).
		SetDouble("frequency-cutoff-y", frequency_cutoff_y).
		SetDouble("radius", radius))
	return out
}

func MaskIdealRing(width int, height int, frequency_cutoff float64, ringwidth float64, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("mask_ideal_ring", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetDouble("frequency-cutoff", frequency_cutoff).
		SetDouble("ringwidth", ringwidth))
	return out
}

func Matrixload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("matrixload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func Pdfload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("pdfload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func PdfloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("pdfload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out))
	return out
}

func Perlin(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("perlin", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func Pngload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("pngload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func PngloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("pngload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out))
	return out
}

func Ppmload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("ppmload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func Radload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("radload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func Rawload(filename string, width int, height int, bands int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("rawload", options.
		SetString("filename", filename).
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height).
		SetInt("bands", bands))
	return out
}

func Sines(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("sines", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func Svgload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("svgload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func SvgloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("svgload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out))
	return out
}

func System(cmd_format string, options *Options) {
	if options == nil {
		options = NewOptions()
	}
	Call("system", options.
		SetString("cmd-format", cmd_format))
}

func Text(text string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("text", options.
		SetImageOut("out", &out).
		SetString("text", text))
	return out
}

func Tiffload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("tiffload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func TiffloadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("tiffload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out))
	return out
}

func Tonelut(options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("tonelut", options.
		SetImageOut("out", &out))
	return out
}

func Vipsload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("vipsload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func Webpload(filename string, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("webpload", options.
		SetString("filename", filename).
		SetImageOut("out", &out))
	return out
}

func WebploadBuffer(buffer *Blob, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("webpload_buffer", options.
		SetBlob("buffer", buffer).
		SetImageOut("out", &out))
	return out
}

func Worley(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("worley", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func Xyz(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("xyz", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height))
	return out
}

func Zone(width int, height int, options *Options) *Image {
	var out *Image
	if options == nil {
		options = NewOptions()
	}
	Call("zone", options.
		SetImageOut("out", &out).
		SetInt("width", width).
		SetInt("height", height))
	return out
}
